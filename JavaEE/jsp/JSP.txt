JSP介绍：
	JSP（全称Java Server Pages）是一种使软件开发者可以响应客户端请求，而动态生成 HTML、XML 或其他格式文档的Web网页的技术标准。
	JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。
	JSP文件后缀名为 *.jsp 。
JSP语法:
	声明:<%! …%>。
		可以声明一个或多个变量、方法。JSP文件中，您必须先声明这些变量和方法然后才能使用它们。?
	代码片段:<%…%>。
		注：在<%%>中声明的变量，在后续的<%%>或<%=%>可读取到
	表达式：<%= … %>。
		表达式会先被转化成String，然后插入到表达式出现的地方。
		注：
			只能插入一个变量!，不能使用分号来结束表达式。
JSP指令:
	介绍：
		应该在JSP文件被转换成Servlet的时候起作用？？？， JSP指令用来设置与整个JSP页面相关的属性。
	格式：
		<%@ directive attribute="value" %>
	directive：
		可为:taglib，include，page
		Page
			该指令为容器提供当前页面的使用说明。
		include
			该指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行（那编译顺序了？）。
		Taglib
			该指令引入一个自定义标签。
		注意:
			被包含的jsp页面不要使用<html>等标签，因为它们是HTML标签包含进其他jsp页面会破坏页面格式。
JSP行为(动作标签)：
	JSP动作元素在请求处理阶段起作用，动作元素基本上都是预定义的函数。
	JSP动作可以动态地插入文件、重用JavaBean组件、把用户重定向到另外的页面...
	<jsp:action_name attribute="value" />
注意:
	include指令和include行为区别:
		相对路径:
			include指令:
				使用文件的相对路径指定被包含文件位置?
			include行为:
				以页面的相对路径来包含指定资源
		包含的资源:
			指令:
				1.:包含的资源全部会被认为静态资源包含进来。
				2:资源相对路径的解析在jsp页面转换成servlet时发生?
			行为:
				1.:包含的资源为动态资源?
				2.:资源相对路径的解析在请求处理时发生。?

JSP隐含对象：
	介绍：
		JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。
		注:request是HttpServletRequest类的实例。session HttpSession类的实例。
	request:
		单选内容获取request.getParameter(string)
		复选框内容获取
		request.getParameterValues(string)
		获取客户端信息
	response:
		重定向:
			response.sendRedirect()
			注：jsp页面中使用该方法前不要有html代码，
			重定向操作后要紧跟return因为重定向后下面代码无意义并且还可能产生错误。
		处理http文件头:
			response.setHeader("refresh","
			2;URL=网页")2秒后跳转到指定网页
		可设置状态码:
	session:
		session对象用来跟踪在各个客户端请求间的会话。
		session的第一次获取：
			request.getSession()
	out:
		out对象是 javax.servlet.jsp.JspWriter 类的实例，用来在response对象中写入内容。

	application:
		生命周期:
			直到服务器关闭。
		访问范围:
			向application中添加属性，则所有组成您web应用的JSP文件都能访问到这些属性。那java文件了，应该不行?
		?:
			这个对象在JSP页面的整个生命周期中都代表着这个JSP页面。这个对象在JSP页面初始化时被创建，随着jspDestroy()方法的调用而被移除。
			(其实我认为就是属于jsp的一个全局变量?)
	config:
		这个对象允许开发者访问Servlet或者JSP引擎的初始化参数，比如文件路径等。
	pageContext:
		这个对象用来代表整个JSP页面。!
	page:
		这个对象就是页面实例的引用。page 对象就是this对象的同义词。
	exception 对象:
		exception 对象包装了从先前页面中抛出的异常信息。它通常被用来产生对出错条件的适当响应。!