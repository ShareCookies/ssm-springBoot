Servlet:
	介绍:
		应用了Servlet接口的java程序。(就是一个实现了Servlet接口的类)
		Servlet生命周期：
			初始化init()：
				Web容器（服务器）启用后加载Servlet并将其实例化后，Servlet生命周期开始，容器运行其init()方法进行Servlet的初始化；
			处理请求service()：
				请求到达时，web容器接收请求并调用对应的Servlet处理请求，web容器会调用Servlet的service()方法处理请求
					附
					1. HttpServlet的service()方法会根据需要调用与请求对应的doGet或doPost等方法；
					2. Servlet处于服务器进程中，它通过多线程方式运行其service()方法，因此一个Servlet实例可以服务于多个请求，并且其实例一般不会销毁，
			销毁destroy()：
				当服务器关闭或项目被卸载时服务器会将Servlet实例销毁，此时会调用Servlet的destroy()方法。
		附：
			servlet容器有：Tomcat、Undertow 、Jetty 
			servlet容器作用：
				servlet容器会监听接收http请求，
				然后调用对应servlet方法，并将request和response传递过去。
					即可看作请求转发给servlet

	使用：
		servlet创建:
			继承HttpServlet，重写doGet和doPost方法。
			注:
				HttpServlet实现了Servlet，重写里service方法，这个方法中会根据request的Method来判断具体是执行doGet还是doPost或其他。
		servlet的声明:
			在web.xml中定义一个Servlet。
			因为定义了Servlet，web容器才能知道需要如何去分发请求进行业务处理的。即指定的url转到servlet。
	附：
		Servlet是如何处理浏览器请求的：
			https://blog.csdn.net/weixin_33369252/article/details/113317227
			浏览器发起请求到服务器，会遵循HTTP协议将请求数据发送给服务器。
			那么服务器(servlet容器)每接受一个请求后，就创建一个对象专门的存储此次请求的请求数据(request),同时也创建一个专门对象(response)存储此次请求的响应数据。
			最后调用servlet的方法，并把这两个参数传递过去。

				Request 对象
					服务器接收到浏览器的请求后，会创建一个 Request 对象，对象中存储了此次请求相关的请求数据。
					服务器在调用 Servlet 时会将创建的Request 对象作为实参传递给 Servlet 的方法。

				Response 对象：
					问题：
						在使用 Request 对象获取了请求数据并进行处理后，处理的结果如何显示到浏览器中呢？
					解释：
						服务器在调用指定的 Servlet 进行请求处理的时候，会给 Servlet 的方法传递两个实参 request 和 response。
						其中 request 中封存了请求相关的请求数据，而 response 则是用来进行响应的一个对象。
		Servlet如何处理多个请求访问：(Servlet容器如何处理多个请求访问)
			https://blog.csdn.net/superviser3000/article/details/88024516
			Servlet容器默认是采用单实例多线程的方式处理多个请求的。
			其过程如下：
			　　1.当web服务器启动的时候（或客户端发送请求到服务器时），Servlet就被加载并实例化(只存在一个Servlet实例)；
				　　附：
						容器初始化Servlet主要就是读取配置文件。
						例如tomcat,可以通过servlet.xml的<Connector>设置线程池中线程数目，初始化线程池通过web.xml,初始化每个参数值等等。
			　　3.当请求到达时，Servlet容器通过调度线程(Dispatchaer Thread) 调度它管理下线程池中等待执行的线程（Worker Thread）分给请求者；
			　　4.线程执行Servlet的service方法；
			　　5.请求结束，放回线程池，等待被调用；
			注：
				因此要避免使用实例变量（成员变量），因为如果存在成员变量，可能发生多线程同时访问该资源时，都来操作它，照成数据的不一致，因此产生线程安全问题。
jsp：
	介绍：
		背景：
			如果用Servlet来生成网页中的动态内容无疑是非常繁琐的工作，另一方面，所有的文本和HTML标签都是硬编码，即使做出微小的修改，都需要进行重新编译。
			JSP解决了Servlet的这些问题，它是Servlet很好的补充，可以专门用作为用户呈现视图（View），而Servlet作为控制器（Controller）专门负责处理用户请求并转发或重定向到某个页面。
			基于Java的Web开发很多都同时使用了Servlet和JSP。
		
		JSP页面其实是一个Servlet，能够运行Servlet的服务器（Servlet容器）通常也是JSP容器，可以提供JSP页面的运行环境，
			Tomcat就是一个Servlet/JSP容器。
		第一次请求一个JSP页面时，Servlet/JSP容器首先将JSP页面转换成一个JSP页面的实现类，
			这是一个实现了JspPage接口或其子接口HttpJspPage的Java类。JspPage接口是Servlet的子接口，因此每个JSP页面都是一个Servlet。
		转换成功后，容器会编译Servlet类，之后容器加载和实例化Java字节码，并执行它通常对Servlet所做的生命周期操作。
		对同一个JSP页面的后续请求，容器会查看这个JSP页面是否被修改过，如果修改过就会重新转换并重新编译并执行。如果没有则执行内存中已经存在的Servlet实例。
		
		附：
			jsp和servlet关系:
				jsp就是在html里面写java代码，servlet就是在java里面写html代码…
				jsp经过容器解释之后就是servlet.
	JSP有9个内置对象：
		- request：封装客户端的请求，其中包含来自GET或POST请求的参数；
		- response：封装服务器对客户端的响应；
		- pageContext：通过该对象可以获取其他对象；
		- session：封装用户会话的对象；
		- application：封装服务器运行环境的对象；
		- out：输出服务器响应的输出流对象；
		- config：Web应用的配置对象；
		- page：JSP页面本身（相当于Java程序中的this）；
		- exception：封装页面抛出异常的对象。
	例：
		我们可以看一段JSP代码对应的Java程序就知道一切了，而且9个内置对象的神秘面纱也会被揭开。
		jsp对应的servlet.txt
附:
	servlet最好放在controller包中，servlet要配置URL地址，jsp不用因为jsp的地址就是文件夹地址。servlet通过配置的地址访问。
	WEB-INF文件夹(网站信息文件)，该文件夹是受保护的，外部无法通过url来访问的。文件夹里面包含了web.xml以及class和libs目录。
        web容器加载servlet，初始化servlet的init()，处理请求service()，处理完成destroy()。
		
	转发（forward）和重定向（redirect）：
		forward是容器中控制权的转向，是服务器请求资源。
服务器直接访问目标地址的URL，把那个URL 的响应内容读取过来，然后把这些内容再发给浏览器，
浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。

redirect就是服务器端根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址。