https://blog.csdn.net/yb223731/article/details/90349502
什么是分布式锁:
	要介绍分布式锁，首先要提到与分布式锁相对应的是线程锁、进程锁。
	线程锁：
		主要用来给方法、代码块加锁。
		当某个方法或代码使用锁，在同一时刻仅有一个线程执行该方法或该代码段。线程锁只在同一JVM中有效果，因为线程锁的实现在根本上是依靠线程之间共享内存实现的，比如synchronized是共享对象头，显示锁Lock是共享某个变量（state）。
	进程锁：
		为了控制同一操作系统中多个进程访问某个共享资源，因为进程具有独立性，各个进程无法访问其他进程的资源，因此无法通过synchronized等线程锁实现进程锁。
	分布式锁：
		当多个进程不在同一个系统中，用分布式锁控制多个进程对资源的访问。
	附：
		什么时候用分布式锁：
			线程间并发问题和进程间并发问题都是可以通过分布式锁解决的，但是强烈不建议这样做。因为采用分布式锁解决这些小问题是非常消耗资源的！分布式锁应该用来解决分布式情况下的多进程并发问题才是最合适的。
			例：
				有这样一个场景，线程A和线程B都共享某个变量X。
				如果是单机情况下（单JVM），线程之间共享内存，只要使用线程锁就可以解决并发问题。
				如果是分布式情况下（多JVM），线程A和线程B很可能不是在同一JVM中，这样线程锁就无法起到作用了，这时候就要用到分布式锁来解决。


分布式锁一般有三种实现方式：
	1. 数据库乐观锁；
	2. 基于Redis的分布式锁；
	3. 基于ZooKeeper的分布式锁。
Redis实现分布式锁：
	https://blog.csdn.net/yb223731/article/details/90349502
	分布式锁实现的关键是在分布式的应用服务器外，搭建一个存储服务器，存储锁信息，这时候我们很容易就想到了Redis。
	在实现的时候要注意的几个关键点：
		首先，为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：
			互斥性。在任意时刻，只有一个客户端能持有锁。
			具有容错性。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。
			解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。
			不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。
	例：
		./RedisLockUtil.java
		这是单机redis，因为集群redis不支持lua


		
废弃：
缺陷思考:
	拿到锁后，业务得在过期时间内完成操作。
		即保证锁时间大于业务执行时间：
			加锁成功后，启动一条守护线程，守护线程给锁进行无限续期。
			当锁不存在的时候就跳过，存在就续期，可以保证锁的时间大于业务时间。
				附：
					线程为守护线程的原因是，守护线程依赖于主线程，当主线程挂了之后，守护线程也会挂掉！这样能避免程序宕机之后，续期的线程依旧续期，造成死锁！
					主线程是指一个正常线程吧！那守护线程是依赖于main还是这个正常线程了？应该是这个正常线程		
	拿到锁后，没释放锁的情况下，在过期时间内，再去拿锁...
	释放锁是没有做事务，有极小概率删除他的人锁。
		单台redis可以参考eval函数+lua脚本。
		或保证，删锁过程中，锁不会过期呗。