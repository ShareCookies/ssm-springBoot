redis持久化：
	Redis 为了保证效率，数据缓存在了内存中。
	但是redis会周期性的把更新的数据写入磁盘(或者把修改操作写入追加的记录文件中)，进行数据的持久化，防止数据丢失。
	附：
		你也可以关闭持久化功能，让数据只在服务器运行时存。
		例：
			1. redis.conf，找到save配置，改为save "" 即可。
			2. 同时建议删除redis.conf，dir配置 指向目录的文件。
				持久化的磁盘文件存放的目录。
			否则重启redis时可能会用该目录中的*.rdb文件，进行数据恢复，那么就会出现异常。
Redis 提供了两种持久化方式:RDB（默认） 和AOF
	RDB（Redis DataBase）：
		RDB：
			Redis 默认是快照 RDB 的持久化方式。
			每隔一段时间rdb就将内存的数据以快照的形式保存到硬盘中，即dump.rdb(二进制文件)文件中。
				
			附：
				通过配置文件中的save参数可定义快照的周期。		
		RDB工作原理：
			两个核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）。
			...
		附：
			1、RDB数据安全性低。
			RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。
			所以这种方式更适合数据要求不严谨的时候

	AOF（Append-only file）:
		介绍：
			AOF是将Redis执行的每次写(修改)命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。	
			//！是要写成功，才会在修改内存数据吧
		aof的开启：
			https://www.cnblogs.com/brady-wang/p/13405346.html
			...
		AOF工作原理：
			...
		附：
			1、AOF持久化策略(默认每秒)：
				appendfsync always (同步持久化，每进行一次 命令操作就记录到 aof 文件中一次。性能差但数据完整性比较好)
　　			appendfsync everysec (异步操作，每秒记录。如果一秒钟内宕机，有数据丢失)
　　			appendfsync no （将缓存回写的策略交给系统，linux 默认是30秒将缓冲区的数据回写硬盘的）			
				//redis.conf文件中就行该配置修改
				
			2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。？
			3、AOF 机制的 rewrite 模式。？
			AOF 文件没被 rewrite 之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）
附
	比较：
		1、aof比rdb更安全
		2、rdb性能比aof好
注:
	如果两个都配了.当 Redis 重启的时候，它会优先使用 AOF 文件来还原数据集.
	因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。
?
有很多用户都只使用AOF持久化，但并不推荐这种方式：
	因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 
	并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，
		?不是会优先使用aof恢复吗，那rdb有什么用
	除此之外，使用RDB还可以避免AOF程序的bug。?

	附：
		Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（通过配置项 aof-use-rdb-preamble 开启）。

如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。
这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。
当然缺点也是有的， AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。
