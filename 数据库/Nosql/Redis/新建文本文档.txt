使用过Redis分布式锁:

 

	先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。

	如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？

	set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！
Redis做异步队列：
	一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。
	缺点：
		在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。
		能不能生产一次消费多次呢？
			使用pub/sub主题订阅者模式，可以实现1:N的消息队列。
什么是一致性哈希算法？什么是哈希槽？
	https://www.cnblogs.com/lpfuture/p/5796398.html

	http://www.jasontec.cn/articles/2020/04/11/1586586130767.html
缓存穿透：
	介绍：
		一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。

	如何避免：
		1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。
		2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。
		布隆过滤器...
			https://my.oschina.net/LucasZhu/blog/1813110

缓存雪崩
	介绍：
		当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。
	如何避免：
		1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。
		2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期
		3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。
读写并发的时候，会出现缓存与数据库不一致的场景：
	看你用那种缓存更新策略。
	
	https://www.cnblogs.com/rjzheng/p/9041659.html
	附：
	先更新数据库，再更新缓存 问题：
		原因一（并发网络不稳，导致缓存不一致）
			同时有请求A和请求B进行更新操作，那么会出现
			（1）线程A更新了数据库
			（2）线程B更新了数据库
			（3）线程B更新了缓存
			（4）线程A更新了缓存
			这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存。这就导致了脏数据，因此不考虑。
		附：
		原因二（业务场景角度）
			（1）如果你是一个写数据库场景比较多，而读数据场景比较少的业务需求，采用这种方案就会导致，数据压根还没读到，缓存就被频繁的更新，浪费性能。
			（2）如果你写入数据库的值，并不是直接写入缓存的，而是要经过一系列复杂的计算再写入缓存。那么，每次写入数据库后，都再次计算写入缓存的值，无疑是浪费性能的。显然，删除缓存更为适合。
	缓存用法：读时更新缓存，然后更新时删除缓存。这种情况一般会有以下几种不一致情况：
		删写问题：
			先删缓存，再更新数据库方案。
			当同时有一个请求A进行更新操作，另一个请求B进行查询操作。
			那么会出现如下情形:
			（1）请求A进行写操作，删除缓存
			（2）请求B查询发现缓存不存在
			（3）请求B去数据库查询得到旧值
			（4）请求B将旧值写入缓存
			（5）请求A将新值写入数据库
			上述情况就会导致不一致的情形出现。而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。
			延时双删策略：(我觉的双删就好)
				先删除缓存，再更新数据库，
				休眠1秒，在删除缓存
					读写并发时，a写（删缓更库）b查（查库更缓），在删就可以避免b的脏缓存。
					
					为什么要延时了：	
						因为可能步骤5即写的速度在4前，然后才4吗!
		更删：
			先更新数据库，再删缓存。
			一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生：
			（1）缓存刚好失效
			（2）请求A查询数据库，得一个旧值
			（3）请求B将新值写入数据库
			（4）请求B删除缓存
			（5）请求A将查到的旧值写入缓存
			但这种情况几乎很少出现，因为读的速度比写的快。
pipeline：
	redis的pipeline可以一次性发送多个命令去执行，在执行大量命令时，可以减少网络通信次数提高效率。
	redis集群使用pipeline：
		jedisCluster（redis的集群连接api）并不支持pipeline语法（只是不提供相应的方法而已）。
		不过只要稍稍看下jedis的源码，就可以发现虽然没有现成的轮子，但是却很好造。
		造轮子：
			https://blog.csdn.net/weixin_30765577/article/details/97804057?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_v29-1-97804057.nonecase&utm_term=redis%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8pipeline&spm=1000.2123.3001.4430
			https://my.oschina.net/u/4554374/blog/4306457

redis为什么能单机承受10w并发？
redis命令是单个单个执行的吗？