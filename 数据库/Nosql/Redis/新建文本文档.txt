使用过Redis分布式锁:

 

	先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。

	如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？

	set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！
Redis做异步队列：
	一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。
	缺点：
		在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。
		能不能生产一次消费多次呢？
			使用pub/sub主题订阅者模式，可以实现1:N的消息队列。
什么是一致性哈希算法？什么是哈希槽？
	https://www.cnblogs.com/lpfuture/p/5796398.html

	http://www.jasontec.cn/articles/2020/04/11/1586586130767.html
缓存穿透：
	介绍：
		一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。

	如何避免：
		1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。
		2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。
		布隆过滤器...
			https://my.oschina.net/LucasZhu/blog/1813110

缓存雪崩
	介绍：
		当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。
	如何避免：
		1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。
		2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期
		3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。