redis介绍：
	../Redis.txt

spring缓存官网：
	Spring官方demo：
		https://spring.io/guides/gs/caching/
		这里提供了使用默认缓存的demo，内容更加简单，适合对spring-boot不熟悉的读者。
	Spring官方文档：
		https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache
		这里有对如何使用cache的详细介绍，比如如何主动更新缓存、移除缓存，都是本demo中没有的内容。
SpringBoot缓存：	
	https://blog.csdn.net/weixin_36279318/article/details/82820880		
1.JSR107
	Java Caching定义了5个核心接口。
	CachingProvider
		定义了创建、配置、获取、管理和控制多个CacheManager。
		一个应用可以在运行期访问多个CachingProvider。
	CacheManager
		定义了创建、配置、获取、管理和控制多个唯一命名的Cache，这些Cache 存在于CacheManager的上下文中。
		一个CacheManager仅被一个CachingProvider所拥有。
	Cache
		是一个类似Map的数据结构并临时存储以Key为索引的值。
		一个Cache仅被一个 CacheManager所拥有。
	Entry
		是一个存储在Cache中的key-value对。
	Expiry
		每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间条目为过期 的状态。一旦过期条目将不可访问、更新和删除。
		缓存有效期可以通过ExpiryPolicy设置。
Spring缓存抽象
	应用程序只要面向Spring缓存API编程，应用底层的缓存实现可以在不同的缓存之间自由切换。

	Spring3.1开始定义了org.springframework.cache.Cache和org.springframework.cache.CacheManager接口来统一不同的缓存技术； 
	并支持使用JCache（JSR-107）注解简化我们开发。
Cache？
	Cache接口为缓存的组件定义规范，包含缓存的各种集合操作。
	Cache接口下Spring提供了各种xxxCache的实现；如RedisCache，EhCacheCache , ConcurrentMapCache。
CacheManager？
	能够管理Cache 并提供缓存的实现方案。(如内存,redis,等)  
	是提供一个默认的缓存策略吗
	未配置时spring有一个默认的simpleCacheManager
spring缓存注解：
	@EnableCaching	
		开启基于注解的缓存
	@Cacheable	
		https://blog.csdn.net/pengzhisen123/article/details/94409825
		介绍：
			1. 根据方法的请求参数对其结果进行缓存。
				即：
				Spring在缓存方法的返回值时是以键值对进行缓存的。
				值就是方法的返回结果。
				至于键的话，Spring又支持两种策略，默认策略和自定义策略。
			2. @Cacheable 的执行逻辑是：查找缓存 - 有就返回 -没有就执行方法体 - 将结果缓存起来；
				即：
				对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。
			注：需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。
		附： 	
			@Cacheable可以标记在一个方法上，也可以标记在一个类上。
			当标记在一个方法上时表示该方法是支持缓存的。
			当标记在一个类上时则表示该类所有的方法都是支持缓存的。		

		属性：
			https://blog.csdn.net/lzb348110175/article/details/105349109
			value/cacheNames：？
				这两个属性都是用来指定缓存组件的名称，即将方法的返回结果放在哪个缓存中。
				属性定义为数组，可以指定多个缓存；其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。
				例：
					@Cacheable(value = "user") //@Cacheable(cacheNames = "user")
					//@Cacheable({“cache1”, “cache2”})//Cache是发生在cache1和cache2上的 

			key：
				key属性是用来指定Spring缓存方法的返回结果时对应的key的。
				当我们没有指定该属性时，Spring将使用默认策略生成key。我们这里先来看看自定义策略，至于默认策略会在后文单独介绍。
				自定义策略：
					自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”。
					例：
						@Cacheable(value=”users”, key=”#id”)
						@Cacheable(value=”users”, key=”#p0”)
						@Cacheable(value=”users”, key=”#user.id”)
						@Cacheable(value=”users”, key=”#p0.id”)
					例：
						@Cacheable(cacheNames = "user-umsgroup-getbyuserno", key = "#userNo+#systemNo")
						@Cacheable(cacheNames = "user-getumsuser-grouprelates", key = "#umsUserGroupRelate.groupNo+#umsUserGroupRelate.systemNo")
			condition
				指定发生的条件。有的时候我们可能并不希望缓存一个方法所有的返回结果。通过condition属性可以实现这一功能。
				condition属性默认为空，表示将缓存所有的调用情形。其值是通过SpringEL表达式来指定的，当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。
				例：
					如下示例表示只有当user的id为偶数时才会进行缓存。
					@Cacheable(value={“users”}, key=”#user.id”, condition=”#user.id%2==0”)
		例：
		    @Cacheable(cacheNames = "list-resource-byrole", key = "#roleId")
			public List<String> listResourceByRoleId(String roleId) {
				return mapper.listResourceByRoleId(roleId);
			}


	@CacheEvict
		根据条件对缓存进行清空。
	@CachePut	
		保证方法被调用，又希望结果被缓存。
			即@CachePut 的逻辑是：执行方法体 - 将结果缓存起来；
	附：
		@Cacheable 和 @CachePut 区别：
	　　　　@Cacheable 的逻辑是：查找缓存 - 有就返回 -没有就执行方法体 - 将结果缓存起来；
	　　　　@CachePut 的逻辑是：执行方法体 - 将结果缓存起来；
		　　所以 @Cacheable 适用于查询数据的方法，@CachePut 适用于更新数据的方法。