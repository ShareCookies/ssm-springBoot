MongoDB的3大技术特色：
	灵活动态的文档模型
		MongoDB 文档使用JSON数据格式来存储记录。
	高可用：
		https://www.jianshu.com/p/2825a66d6aed
		什么是高可用性：
			高可用性H.A.（High Availability）指的是通过尽量缩短因日常维护操作（计划）和突发的系统崩溃（非计划）所导致的停机时间，以提高系统和应用的可用性。
			附：
				HA系统是目前企业防止核心计算机系统因故障停机的最有效手段。
		HA的三种工作方式：
			主从方式 （非对称方式）:
				工作原理：
					1.主机工作，备机处于监控准备状况；当主机宕机时，备机接管主机的一切工作，待主机恢复正常后，按使用者的设定以自动或手动方式将服务切换到主机上运行.
					2.数据的一致性通过共享存储系统解决。
			双机双工方式（互备互援）:
				工作原理：
					1.两台主机同时运行各自的服务工作且相互监测情况，当任一台主机宕机时，另一台主机立即接管它的一切工作，保证工作实时.
					2.应用服务系统的关键数据存放在共享存储系统中。

			集群工作方式（多服务器互备方式）
				工作原理：
					多台主机一起工作，各自运行一个或几个服务，各为服务定义一个或多个备用主机，当某个主机故障时，运行在其上的服务就可以被其它主机接管

		通过集群架构实现高可用性:
			./MongoDB高可用实现.txt
			这里的架构是指即多台服务器搭建的框架		

	水平扩展：
		https://www.jianshu.com/p/f33570f0cd30
		本文关注于非关系型数据库中分区的技巧和性能
		介绍：
			指的是通过增加服务器数量来对系统扩容,提高服务器性能，如处理速度。
			MongoDB通过分片功能来实现水平扩展能力。
				
			附：
				1.这样的架构下单台服务器的配置并不会很高，所有机器服务器组成的集群会比单体服务器提供更强大、高效的系统容载量。
				2.水平扩展作用：
					前面提到的副本集分布式数据库还是存在较多的瓶颈。
						如Replication 结构可以保证数据库中的全部数据都会有多分拷贝，数据库的高可用可以保障。
						但是新的问题是如果要存储大量的数据，不论主从服务器，都需要存储全部数据，这样检索必然会出现性能问题。

					可以这样讲，Replication只能算是分布式数据库的第一阶段。主要解决的是数据库高可用，读数据可以水平扩展，部分解决了主数据并发访问量大的问题。
					但是它并没有解决数据库写操作的分布式需求。
					且在数据库查询时也只限制在一台服务器上，并不能支持一次查询多台数据库服务器。

		MongoDB Sharding 分片实现：
			./MongoDB Sharding分片实现.txt
		附：
			​数据库扩展方式：
				对于数据库的扩展来说，通常有两种方法，水平扩展和垂直扩展。
				垂直扩展：
					这种扩展方式比较传统，是针对一台服务器进行硬件升级。
					比如添加强大的 CPU，内存或者添加磁盘空间等等。这种方式的局限性是仅限于单台服务器的扩容，尽可能的增加单台服务器的硬件配置。
					优点是构架简单，只需要维护单台服务器。

				水平扩展：
					这种方式是目前构架上的主流形式，指的是通过增加服务器数量来对系统扩容。
						在这样的构架下，单台服务器的配置并不会很高，可能是配置比较低、很廉价的 PC，每台机器承载着系统的一个子集，所有机器服务器组成的集群会比单体服务器提供更强大、高效的系统容载量。
						这样的问题是系统构架会比单体服务器复杂，搭建、维护都要求更高的技术背景。
						
						MongoDB 中的 Sharding 正式为了水平扩展而设计的，下面就来挤开 shard 面纱，探讨一下 shard 中不同分片的技术区别以及对数据库系统的影响。
			分片 ：Shard
				实现数据库水平切分，把切分的数据分布存储在不同的服务器上，
				这样当查询请求发送到数据库时，可以在多台数据库中异步检索符合查询条件的语句，这样不但可以利用多台服务器的 CPU，而且还可以充分利用不同服务器上的 IO，显而易见这样的构架会大大提高查询语句的性能。
				附：
					分片带来的事务和表管理查询问题：
						1.但是这样的实现却给数据库设计者代码不少麻烦，首先要解决的就是事务（Transaction），我们知道在进行一次数据库写操作的时候，需要定一个事务操作，这样在操作失败的时候可以回滚到原始状态，那当在分布式数据库的情况下，事务需要跨越多个数据库节点以保持数据的完整性，这给开发者带来不少的麻烦。

						2.此外，在关系型数据库中存在大量表关联的情况，分布式的查询操作就会牵扯到大量的数据迁移，显然这必将降低数据库性能。
						3.根据 CAP 理论，关系型数据库设计选择了一致性与可用性
						但是，在非关系型数据库中，我们弱化甚至去除了事务和多表关联操作

		
总结：
	MongoDB 中通过 Shard 支持服务器水平扩展，通过 Replication 支持高可用（HA）。
	这两种技术可以分开来使用，但是在大数据库企业级应用中通常人们会把他们结合在一起使用。
	附：	
		分片和副本集的关系：
			https://blog.csdn.net/baidu_36095053/article/details/80192239
			https://www.jianshu.com/p/661681bebe05
			分片：
				是将一台mongo服务的大数据集合，分散成若干台mongo服务上的小数据集合；
				通过水平扩展提高了数据库的响应能力。
				如
					分片成1mongo服务运行，和分片2mongo服务运行，
					分片1包含原本服务的一部分数据，则分片2包含了原本服务的另一部分数据。
			副本集：
				将一台主机上的数据复制到多台从节点上的技术；
				从而提高服务器的高可用性。
			分片和副本集结合使用：
				先将一台mongo服务分为多台shard服务，提高了响应能力。
				又再次对每个shard服务，应用replica功能，来提高每台shard服务的高可用性。
		水平扩展和高可用名词解释：
			水平扩展指的是把数据切分到多台服务器上运行来提高服务器性能，如处理速度。
			高可用指的是提高服务器的可用性，如一台机器宕机了并不会影响程序的运行。
附：
	MongoDB还支持：二级索引、动态查询、全文搜索 、聚合框架、MapReduce、GridFS、地理位置索引、内存引擎 、地理分布等一系列的强大功能。