链接：
	教程：
		https://www.cnblogs.com/clsn/p/8214194.html
		https://www.runoob.com/mongodb/mongodb-create-database.html
	官网：
		https://docs.mongodb.com/guides/
		https://www.mongodb.org.cn/tutorial/
什么是MongoDB:
	MongoDB 是一个基于分布式文件存储的开源数据库系统。
		由C++语言编写
		旨在为WEB应用提供可扩展的高性能数据存储解决方案。
	MongoDB 将数据存储为一个文档.文档的数据结构由键值(key=>value)对组成。
	
	附：
		MongoDB适用场景
　　		网站数据、缓存等大尺寸、低价值的数据等
MongoDB安装：
	./Linux安装MongoDB.txt
	附：
		MongoDB命令：
			以守护进程的方式 启动 MongoDB 服务(MongoDB数据库服务)：
				https://www.jianshu.com/p/fb8edf5a1a04
				如果想在后台运行，启动时只需添加 --fork函数即可。
				$ ./mongod --fork --logpath=/data/db/log.log

				附：
					1.mongod命令在 mongo安装目录/bin/mongod下
					2.启动时，如果你的数据库目录不是/data/db，可以通过 --dbpath 来指定。
					3.执行启动操作后，mongodb 在输出一些必要信息后不会输出任何信息。
					之后就会等待连接的建立，当连接被建立后，会打印日志信息。
					4.MongoDB的启动与停止（一）
						https://www.cnblogs.com/lemon-le/p/7132038.html
					5.mongod有很多可配置的启动选项，可以使用mongod --help查看所有选项

			show dbs 命令可以显示所有数据的列表：
				> show dbs
			db  命令可以显示当前数据库对象或集合：
				> db
			use命令，可以连接到一个指定的数据库：
				> use local
		MongoDB连接：
			标准 URI 连接语法：
				mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]
				
				mongodb:// 
					固定的格式
				username:password@ 
					可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库
				host1 
					至少指定一个host。
					它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。
				portX 可选的指定端口，如果不填，默认为27017
				/database 如果指定username:password@，连接并验证登陆指定数据库。若不指定，默认打开 test 数据库。
				?options 是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&或;（分号）隔开
					标准的连接格式包含了多个选项(options)，如下所示：

					选项	描述
					replicaSet=name	验证replica set的名称。 Impliesconnect=replicaSet.
					slaveOk=true|false	
					true:在connect=direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect=replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。
					false: 在 connect=direct模式下，驱动会自动找寻主服务器. 在connect=replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。
					safe=true|false	
					true: 在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS).
					false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。
					w=n	驱动添加 { w : n } 到getLastError命令. 应用于safe=true。
					wtimeoutMS=ms	驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于 safe=true.
					fsync=true|false	
					true: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于 safe=true.
					false: 驱动不会添加到getLastError命令中。
					journal=true|false	如果设置为 true, 同步到 journal (在提交到数据库前写入到实体中). 应用于 safe=true
					connectTimeoutMS=ms	可以打开连接的时间。
					socketTimeoutMS=ms	发送和接受sockets的时间。

MongoDB的特色：
	3大技术特色：
		灵活动态的文档模型
			MongoDB 文档使用JSON数据格式来存储记录。

		高可用：
			https://www.jianshu.com/p/2825a66d6aed
			什么是高可用性：
				高可用性H.A.（High Availability）指的是通过尽量缩短因日常维护操作（计划）和突发的系统崩溃（非计划）所导致的停机时间，以提高系统和应用的可用性。
				附：
					它与被认为是不间断操作的容错技术有所不同!
					HA系统是目前企业防止核心计算机系统因故障停机的最有效手段。
			HA的三种工作方式：
				主从方式 （非对称方式）:
					工作原理：
						1.主机工作，备机处于监控准备状况；当主机宕机时，备机接管主机的一切工作，待主机恢复正常后，按使用者的设定以自动或手动方式将服务切换到主机上运行.
						2.数据的一致性通过共享存储系统解决。
				双机双工方式（互备互援）:
					工作原理：
						1.两台主机同时运行各自的服务工作且相互监测情况，当任一台主机宕机时，另一台主机立即接管它的一切工作，保证工作实时.
						2.应用服务系统的关键数据存放在共享存储系统中。

				集群工作方式（多服务器互备方式）
					工作原理：
						多台主机一起工作，各自运行一个或几个服务，各为服务定义一个或多个备用主机，当某个主机故障时，运行在其上的服务就可以被其它主机接管

			使用集群提高可用性:
				架构:(即多台服务器是如何搭建的)
					主从架构（Master-Slave）：
						主从架构一般用于备份或者做读写分离。
						由两种角色构成：
						主(Master)
							可读可写，当数据有修改的时候，会同步到所有连接的salve上去。
						从(Slave)
							只读不可写，自动从Master同步数据。
						符：
							1.对于Mongodb来说，并不推荐使用Master-Slave架构，因为Master-Slave其中Master宕机后不能自动恢复，推荐使用Replica Set。
							2.Master-Slave不支持链式结构，Slave只能直接连接Master。
							Redis的Master-Slave支持链式结构，Slave可以连接Slave，成为Slave的Slave。
						Mongodb搭建过程：
							...
					副本集架构（Replica Set）：
						
						副本集架构作用：
							1.防止单点故障
								当发生硬件故障或者其它原因造成的宕机时，可以使用副本进行恢复，最好能够自动的故障转移（failover）。
							2.为了读写分离
								有时引入副本是为了读写分离，将读的请求分流到副本上，减轻主（Primary）的读压力。
							...
								自动复制和故障切换
								多数据中心支持滚动维护无需关机支持最多50个成员
							Mongodb的Replica Set都能满足这些要求。
						mongod的Replica Set角色：
							mongod的Replica Set实例集合，它们有着同样的数据内容，但分为三类角色：
							主节点（Primary）
								1.接收所有的写请求，然后把修改同步到所有Secondary。
								2.默认读请求也是发到Primary节点处理的，需要转发到Secondary需要客户端修改一下连接配置。
								3.一个Replica Set只能有一个Primary节点，当Primar挂掉后，其他Secondary节点会重新选举出来一个主节点。
								
							副本节点（Secondary）
								与主节点保持同样的数据集。当主节点挂掉的时候，参与选主。
							仲裁者（Arbiter）
								不保有数据，不参与选主，只进行选主投票。
								使用Arbiter可以减轻数据存储的硬件需求，Arbiter跑起来几乎没什么大的硬件资源需求
								重要的一点是，在生产环境下它和其他数据节点不要部署在同一台机器上。

							注：
								一个自动failover的Replica Set节点数必须为奇数，目的是选主投票的时候要有一个大多数才能进行选主决策。
						Mongodb搭建过程：
							https://www.jianshu.com/p/2825a66d6aed
							https://www.cnblogs.com/shenshangzz/p/8261064.html
							Primary和Secondary搭建的Replica Set：
								3个数据节点的搭建过程。
								1.启动3个数据节点
									mongod --port 2001 --dbpath rs0-1 --replSet rs0
									mongod --port 2002 --dbpath rs0-2 --replSet rs0
									mongod --port 2003 --dbpath rs0-3 --replSet rs0
									注：
										replSet 设置副本集名称
								
								2.初始化副本集
									连接任意一个服务器，执行一次初始化命令，当前节点即可被选为Primary。
										mongo --port 2001
										rs.initiate()
										rs.add("<hostname>:2002")
										rs.add("<hostname>:2003")
										rs.conf()
									附：
										1.rs.status() 查看副本集状态
										2.发现自己变成了secondary节点，另一个数据库变成了startup2状态。
										没关系，等下自己会变成primary节点，等另一个数据库同步数据完成，会自动变成secondary节点。

								附：其中Secondary宕机，不受影响，若Primary宕机，会进行重新选主：
							符：	
								客户端连接单个mongod和副本集的操作是相同的，只需要配置好连接选项即可。
								例：
									spring.data.mongodb.uri=mongodb://192.168.252.121:20000,192.168.252.122:20000,192.168.252.12:20000/demo
							?数据分片架构（Sharding）

		水平扩展：
			https://www.jianshu.com/p/f33570f0cd30
			目前主流的构架形式，指的是通过增加服务器数量来对系统扩容。
				这样的构架下，单台服务器的配置并不会很高，所有机器服务器组成的集群会比单体服务器提供更强大、高效的系统容载量。
		附：
			MongoDB还支持：二级索引、动态查询、全文搜索 、聚合框架、MapReduce、GridFS、地理位置索引、内存引擎 、地理分布等一系列的强大功能。
