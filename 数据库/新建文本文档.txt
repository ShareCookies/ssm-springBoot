存储引擎
	5.7后MySQL默认的存储引擎是InnoDB,且只有 InnoDB 是事务性存储引擎。即只有 InnoDB 支持事务
	MVCC ：
		https://segmentfault.com/a/1190000012650596
字符集及校对规则
	https://www.cnblogs.com/geaozhang/p/6724393.html#MySQLyuzifuji
	字符集：
		指的是一种从二进制编码到某类字符符号的映射。
		MySQL每个数据库以及每张数据表都有自己的默认值，他们逐层继承。
		例：
			UTF8字符集
	校对规则：
		是在字符集内用于字符比较和排序的一套规则。
	
		特征：
			校对规则命名约定：
				以相关的字符集名开始。
				中间包括一个语言名。
				并且以_ci（大小写不敏感）、_cs（大小写敏感）或_bin（二元）结束。
			每个字符集有一个默认校对规则；
				utf8字符集默认校对规则是utf8_general_ci。
索引
	MySQL索引使用的数据结构主要有BTree索引 和 哈希索引 。
	在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。
	哈希索引:
		底层的数据结构就是哈希表.
	BTree索引:
		MySQL的BTree索引使用的是B树中的B+Tree，但对于主要的两种存储引擎的实现方式是不同的。
		InnoDB: 
			其数据文件本身就是索引文件。
			表数据文件本身就是按B+Tree组织的一个索引结构，树的叶节点data域保存了完整的数据记录。
			(MyISAM索引文件和数据文件是分离的)
			附：
				这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。这被称为“聚簇索引（或聚集索引）”。
				而其余的索引都作为辅助索引，辅助索引的data域存储相应记录主键的值而不是地址，这也是和MyISAM不同的地方。
				在根据主索引搜索时，直接找到key所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 
				因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。
查询缓存：
	执行查询语句的时候，会先查询缓存。不过，MySQL 8.0 版本后移除，因为这个功能不太实用
