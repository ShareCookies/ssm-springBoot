事务并发问题：
	多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。
	当多个事务访问同一数据时，可能会存在5类问题，包括3类数据读取问题（脏读、不可重复读和幻读）和2类数据更新问题（第1类丢失更新和第2类丢失更新）。

	可能会导致以下的问题：
		脏读（Dirty Read）: 
			A事务读取B事务尚未提交的数据并在此基础上操作，那么A读取到的数据就是脏数据。
			例：
                当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中。
                这时另外一个事务也访问了这个数据，然后使用了这个数据。
                因为这个数据是还没有提交的数据，那么另外一个事务读到的数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。
                因为有可能数据对应事务回滚了，或在次被别的事务读取了等等问题。
                https://blog.csdn.net/iteye_6233/article/details/82374373
		不可重复读（UnrepeatableRead）: 
			事务A重新读取前面读取过的数据，发现该数据已经被另一个已提交的事务B修改过了。
			例：
				一个事务内多次读同一数据
				a 读取 -》b 修改（提交）-》a读取
				总结：a 前后读取到的数据不一样
		幻读（Phantom Read）: 
			A事务读取了几行数据，接着B事务插入了一些数据，A事务再查询发现多了一些原本不存在的记录。
			就好像发生了幻觉一样，所以称为幻读。	
			例：
				一个事务内读取的数据量不一致
				a 读取  b 新增（提交） a读取
				总结：a 前后读取到的数据量不一样
			附：
				不可重复读和幻读区别：
					不可重复读的重点是数据修改
						比如多次读取一条记录发现其中某些列的值被修改
					幻读的重点在于新增或者删除，或某行记录被修改
						比如多次读取一条记录发现记录增多或减少了。
					
		丢失修改（Lost To Modify）: 
			指两事务都访问并修改一个数据，其中一个事务修改结果就被丢失，因此称为丢失修改。	
				例：
					第1类丢失更新(回滚丢失，Lost update) ：事务A撤销时，把已经提交的事务B的更新数据覆盖了。
					例：
						事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=19，事务2修改A=21，事务2提交事务A=21，接着事务1异常回滚事务A=20。
					第2类丢失更新(覆盖丢失/两次更新问题，Second lost update) ：事务A覆盖事务B已经提交的数据，造成事务B所做的操作丢失。
					例：
						事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。
			如何避免丢失修改:
				https://blog.csdn.net/qq_39445473/article/details/90488673
				介绍：
					丢失更新处理方式，基本两种思路，一种是悲观锁，另外一种是乐观锁；
					悲观锁：简单的说就是一种假定这样的问题是高概率的，最好一开始就锁住，免得更新老是失败；
					乐观锁：另外一种假定这样的问题是小概率的，最后一步做更新的时候再锁住，免得锁住时间太长影响其他人做有关操作。
					附：
						锁必须在事务内进行声明。在事务外声明的锁将不具备效应。
				    使用悲观锁：
                        通过数据库的锁机制解决丢失更新，给事务中sql均加排它锁。
                        如此事务未经提交，其他的事务根本没法获取修改权，因此排它锁可以用来控制丢失更新。

					使用乐观锁：
						乐观锁的原理是：认为事务不一定会产生丢失更新，让事务进行并发修改，不对事务进行锁定。发现并发修改某行数据时，乐观锁抛出异常，让用户解决。
						实现：
						旧值条件（前镜像）法：
							就是在sql更新时使用旧的状态值做条件，SQL大致如下 Update table set col1 =newcol1value, col2 = newcol2value…. where col1 =oldcol1value and col2 = oldcol2value….
							在上面的例子中我们就可以把当前工资作为条件进行更新，如果这条记录已经被其他会话更新过，则本次更新了0行，这里我们应用系统一般会做个提示告知用户重新查询更新。这个取哪些旧值作为条件更新视具体系统实际情况而定。（这种方式有可能发生阻塞，如果应用其他地方使用悲观锁法长时间锁定了这条记录，则本次会话就需要等待，所以使用这种方式时最好统一使用乐观锁法）。

						使用版本列法（推荐优先使用）：
							其实这种方式是一个特殊化的前镜像法，就是不需要使用多个旧值做条件，只需要在表上加一个版本列，这一列可以是NUMBER或DATE/TIMESTAMP列，加这列的作用就是用来记录这条数据的版本（在表设计时一般我们都会给每个表增加一些NUMBER型和DATE型的冗余字段，以便扩展使用，这些冗余字段完全可以作为版本列用），在应用程序中我们每次操作对版本列做维护即可。在更新时我们把上次版本作为条件进行更新。

						使用校验和法（不推荐）

						使用ORA_ROWSCN法（不推荐）
		
		
事务隔离级别：
	https://blog.csdn.net/dengjili/article/details/82468576
	为了避免上面出现的几种情况，标准SQL规范中定义了4个事务隔离级别，不同的隔离级别能避免不同的事务问题。
    附：
        事务隔离级别只是一个定义、标准，具体实现要有厂商来进行。
        所以我们才能通过调整数据库事务隔离级别，来解决事务并发导致的问题。
	SQL 标准定义的四个隔离级别：
		READ-UNCOMMITTED(读取未提交)： 		
			最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。
		READ-COMMITTED(读取已提交)： 
			允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。
		REPEATABLE-READ(可重复读)：
			对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。
			附：
				而mysql的rr级别事务就可以解决 脏读、不可重复读和幻读的
		SERIALIZABLE(可串行化)： 
			最高的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。
		附：
		    一般来说，隔离级别越低，系统开销越低，可支持的并发越高，但隔离性也越差。隔离级别与读问题的关系如下：
	MySQL RR隔离级别：
		1. InnoDB 存储引擎默认支持的隔离级别是 REPEATABLE-READ。
		InnoDB 实现rr 是通过mvvc、next-key、undo：
            MVCC：
                MVCC 全称Multi-Version Concurrency Control(多版本的并发控制协议)。
                使用MVCC可以解决脏读、不可重复读等问题。
                MVCC 实现了：在同一时刻，不同的事务读取到的数据可能是不同的（即多版本数据）。
                例：
                    goto： 可重复读事务的证明案例

                InnoDB 如何实现 MVCC：
                    InnoDB 实现 多个版本的数据可以共存，主要是依靠数据的隐藏列（也可以称之为标记位）和undo log。
                        数据的隐藏列包括了：该行数据的版本号、删除时间、指向undo log的指针等等；
                    当读取数据时，MySQL 可以通过隐藏列判断是否需要回滚并找到回滚需要的undo log，从而实现 MVCC；

                附：
                    MVCC 最大的优点是读不加锁，因此读写不冲突，并发性能好。
            Next-Key Lock：
                与 SQL 标准不同的是，InnoDB 存储引擎在 REPEATABLE-READ（可重读） 事务隔离级别下使用的是Next-Key Lock 锁算法。
                InnoDB 的 next-key lock机制避免了幻读现象。
                next-key lock是行锁的一种，实现相当于record lock(记录锁) + gap lock(间隙锁)；其特点是不仅会锁住记录本身（record lock的功能），还会锁定一个范围（gap lock的功能）。
                附：
                    因此innodb的rr可以避免幻读的产生，这与其他数据库系统(如 SQL Server) 是不同的。
				？
					next-key lock住了 是无法在这个范围内插入吗？
					还是只是记录了范围了?
				Next-Key Lock核心思路：
					...
         注:
            避免脏读的证明案例：(可重复读下，语句未提交，其他事务是读取不到值的)
                插入或修改未提交，别的事务是读取不到值的。
                会话1：插入或修改，未提交。
                    begin; INSERT INTO EGOV_RECEIVAL (...);
                    或则 BEGIN; UPDATE EGOV_RECEIVAL SET DRAFT_USER = "11"
                会话2：别的事务是读取不到值的。
                    begin;SELECT * FROM `EGOV_RECEIVAL` WHERE `SUBJECT` = '66' LIMIT 0,1000
                实现原理：
                    当会话2事务在读取时，会发现数据已被其他事务修改，且状态为未提交。
                    此时会话2事务读取最新数据后，根据数据的undo log执行回滚操作，得到会话1事务修改前的数据，从而避免了脏读。
            可重复读事务的证明案例：
                会话1：
                    BEGIN;
                    SELECT * from EGOV_RECEIVAL  WHERE id='XHzYayMaJdQRhxzh';

                    SELECT * from EGOV_RECEIVAL  WHERE id='XHzYayMaJdQRhxzh';
                会话2：
                    BEGIN;
                    UPDATE EGOV_RECEIVAL SET SOURCE_UNIT = '111111' WHERE id='XHzYayMaJdQRhxzh';
                会话3：
                    BEGIN;

                    SELECT * from EGOV_RECEIVAL  WHERE id='XHzYayMaJdQRhxzh';
                介绍:
                    会话1、2、3开启事务，
                    会话1查询。
                    会话2修改。
                    会话1在查询。会话3查询。
                        会发现会话1查询的数据是旧数据（看不到会话2的更改）。
                        会话3查询是可以看到效果的。
                        因此证明了对REPEATABLE READ事务，是可以避免阻止脏读和不可重复读的。
                附：
                    navicat中的会话是指，新建一个查询界面，即一个查询界面就是一个会话。
                实现原理：
                    当会话1事务在 第一次读取数据时，会记录该数据的版本号（数据的版本号是以row为单位记录的），假设版本号为1；
                    当会话2事务提交时，该行记录的版本号增加，假设版本号为2；
                    当会话1在再一次读取数据时，发现数据的版本号2大于第一次读取时记录的版本号1，因此会根据undo log执行回滚操作，得到版本号为1时的数据，从而实现了可重复读。

            可重复读下，避免幻读的证明案例：
                会话1：
                    begin;
                    SELECT * FROM test WHERE utf8 >=2 AND utf8 <= 5;

                    SELECT * FROM test WHERE utf8 >=2 AND utf8 <= 5;
                会话2：
                    INSERT INTO `eas`.`test`(`utf8`, `gbk`) VALUES ('4', '4')

                实现原理：
                    不加锁读情况下：next-key lock只是为读取的数据和数据范围增加了标记（标记内容包括数据的版本号等）。
                    原理实现：
                        当会话1事务在第一次读取1<=id<=5数据时，标记的不只是已有的符合条件的数据，而且将范围(1, 5)进行了标记，
                        在会话2新增数据后，会话1事务再次读取1<=id<=5数据时，便可以发现utf8=4的数据比之前标记的版本号更高，此时再结合undo log执行回滚操作，避免了幻读。
                    附：
                        加锁读的话，其他事务则是无法进行新增和修改。


		注：
			可重复读下，避免回滚丢失的证明案例：
				mysql的RR隔离级别是不会造成回滚丢失的。
				会话1：
					#会话1先开始
					BEGIN;
					SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG`WHERE ID = 'X0-0AeSwDxNwVkwa';
					#1、 这里先去执行会话2。
					#再回来会发现卡住了 ，应该是会话2 更新的排它锁 锁住了数据
					UPDATE UMS_LOGIN_LOG SET USER_NAME = '1111' WHERE ID = 'X0-0AeSwDxNwVkwa';
					# 执行回滚，你会发现 会话2的数据并没有丢失。
					#附： 在会话2锁住了数据情况下 如果执行这里发现还能select 是因为mvvc吧 ，所以1的锁 锁住的是什么了？
					SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG`WHERE ID = 'X0-0AeSwDxNwVkwa';
					ROLLBACK;
					# 这里查询出来的就是会话2的数据，即你会发现 会话2的数据并没有丢失。
					SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG`WHERE ID = 'X0-0AeSwDxNwVkwa';

				#会话2
					BEGIN;
					SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG`WHERE ID = 'X0-0AeSwDxNwVkwa';
					UPDATE UMS_LOGIN_LOG SET USER_NAME = '2' WHERE ID = 'X0-0AeSwDxNwVkwa';
					SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG`WHERE ID = 'X0-0AeSwDxNwVkwa';
			
				实现原理：？
					应该是mvvc 
					会话2未提交：原始版本  会话1版本 会话2版本
					会话2已提交：会话2原始版本 会话1版本
					会话1回滚： mysql发现 原始版本已更新 就放弃了回滚并且更新了会话1的版本
					
			可重复读下，覆盖丢失：
				介绍：
					mysql可重复读情况下
					1. 直接sql中以字段值为基础值，可以避免覆盖丢失修改
					2. 但要是用户直接赋值，那就无法避免丢失修改了，需要用户手动避免丢失修改(乐观锁)

				例：

					#会话1
						BEGIN;
						SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG` WHERE ID = 'X0-0AeSwDxNwVkwa';
						#在执行查询，还是第一次值（这是为了实现可重复读），那么此时就有个问题？？？如果在应用中进行查询计算的话，不是就有丢失修改了。
						UPDATE UMS_LOGIN_LOG SET USER_NAME = USER_NAME + '1'  WHERE ID = 'X0-0AeSwDxNwVkwa';
						SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG` WHERE ID = 'X0-0AeSwDxNwVkwa';
					#会话2
						BEGIN;
						SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG`  WHERE ID = 'X0-0AeSwDxNwVkwa';
						#1、 这里sql中直接以自身值为基础值 是不会有覆盖丢失修改的 为什么了 。
						#UPDATE UMS_LOGIN_LOG SET USER_NAME = USER_NAME + '2' WHERE ID = 'X0-0AeSwDxNwVkwa';
						#2、这种select出来值 然后计算直接赋值的 是有覆盖丢失修改的
						UPDATE UMS_LOGIN_LOG SET USER_NAME = 4 WHERE ID = 'X0-0AeSwDxNwVkwa';
						SELECT * FROM `zjgy_real`.`UMS_LOGIN_LOG`  WHERE ID = 'X0-0AeSwDxNwVkwa';
				附：乐观锁思想 手动避免 覆盖丢失
					goto：使用乐观锁
					附：有以下三种解决方案：
						1. 提高隔离级别。
							可以尝试提高某类型事务的隔离级别。
						2. 为读加排他锁。
						3. 使用乐观锁思想，让我们手动来解决覆盖丢失
					附：
                        1个提问：
                            方法逻辑：先读取数据，数据存在则更新，不存在则新增。
                            那么如果该方法并发被调用两次，都先判断到无数据，然后新增，该问题如何解决了。
                            解决方式1：java锁
                            解决方式2：乐观锁，数据库加个冗余字段字段值设为唯一，手动递增这样添加数据时就会报错。
		附：
			1.因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 READ-COMMITTED(读取提交内容) 。
			2. InnoDB 默认的 REPEAaTABLE-READ（可重读）， 几乎就能避免所有问题，且不会有任何性能损失。

			3. InnoDB 存储引擎在 分布式事务 的情况下一般会用到 SERIALIZABLE(可串行化) 隔离级别。！

		附：
			隔离级别查看：
				可以通过SELECT @@transaction_isolation命令来查看;
				附：?
					SELECT @@tx_isolation
					https://blog.csdn.net/qq_41384351/article/details/94345508
