索引使用注意事项：（优化注意事项）
	MySQL只对<，<=，=，>，>=，BETWEEN？，IN，以及某些时候的LIKE才会使用索引。
	and or：
		and：
			1. 用and会优先使用有索引的搜索条件。
			2. 用and只会使用一个索引？，且mysql会自我选择使用效率最高的那个索引。
			例：
				#主键ID 索引DOC_SEQUENCE
				EXPLAIN SELECT * FROM EGOV_RECEIVAL WHERE id = 'XYCtqoSukpvSznD2' #type:const rows:1
				EXPLAIN SELECT * FROM EGOV_RECEIVAL WHERE id = 'XYCtqoSukpvSznD2' AND DOC_SEQUENCE = '20190124'  #type:const rows:1
		or：
			1. 用or 那么只要or条件中有非索引的，那么还是全表检索
			2. or 能使用多个索引。
				即各自走辅助索引并把结果混合起来。
			例：
				#主键ID 索引DOC_SEQUENCE
				or有一个非索引：
					EXPLAIN SELECT * FROM EGOV_RECEIVAL WHERE id = 'XYCtqoSukpvSznD2' OR SUBJECT = '索引性能测试' #type:ALL rows:613
				or两个均索引：
					EXPLAIN SELECT * FROM EGOV_RECEIVAL WHERE id = 'XYCtqoSukpvSznD2' OR DOC_SEQUENCE = '20190124' #type:index_merge rows:2
		附：
			搜索条件是可以乱序的，mysql的查询优化器会帮你优化。
	LIKE使用索引:
	  	使用LIKE时要注意，只有使用字母开头才会应用到索引。
		like在以通配符%和_开头作查询时，MySQL不会使用索引。
			
		例:
			如下句会使用索引：
		  　　	SELECT * FROM mytable WHERE username like'admin%'
		 	而下句就不会使用：
		 　　 	SELECT * FROM mytable WHEREt Name like'%admin'
				SELECT * FROM mytable WHERE username like'_admin%'

		因为：
			_也不行是因为任意一个b树上任一索引第一个位置都可能符合要求，所以应用不了索引
			！：
				具体b树是怎么对比的了，是先比a，在比d这些？
	不要在列上进行运算:
		在列上进行运算,要注意 如果该列有索引 那么这将导致索引失效
		例：
			select * from users where YEAR(adddate)<2007;
			因此我们可以改成
		  　　 select * from users where adddate<'2007-01-01';
		！
			NOW()等函数了			
			

	附
	含有NULL值的列：
		mysql5.7：？
			索引不会包含有NULL值的列
				即只要列中包含有NULL值都将不会被包含在索引中。
			例：
				3.where status!=4 不会列出（比较）为null的
				
			附：
				1.判断某字段为空	is null
				2.某字段不为空	is not null
			附：
				？
					复合索引中只要有一列含有 NULL值，那么这一列对于此复合索引就是无效的。
				！
					所以我们在数据库设计时不要让字段的默认值为NULL。
			?
				is null为什么可以走索引了：
					select * from WRONG_IMG_copy1 WHERE CREATOR_ID is null
					解析：1	SIMPLE	WRONG_IMG_copy1		ref	CREATOR_ID	CREATOR_ID	99	const	1	100.00	Using index condition
		mysql5.8：
			mysql应该是没索引不包含null的限制了。
			例：
				where status!=4 也能找出为null的行。
				where status is null 也会走索引。
	<>:
		通常不等于 不走索引而是在server层实现过滤。
		
		例：
			场景：
				CREATE_TIME	CREATE_TIME	NORMAL	0	A	115			0
				CREATOR_ID	CREATOR_ID	NORMAL	0	A	4			0
			select * from WRONG_IMG_copy1 WHERE CREATE_TIME > '2021-01-03' AND CREATOR_ID <> 'hx'
			解析：
				1	SIMPLE	WRONG_IMG_copy1		range	CREATE_TIME,CREATOR_ID	CREATE_TIME	6		31	34.43	Using index condition; Using where
				此处解析结果中有Using where，则说明表示存储引擎返回的记录并不是所有的都满足查询条件,需要在server层进行过滤。
				所以不等于其实是在server层过滤。
				即CREATE_TIME走索引，但CREATOR_ID不走而是把数据在server层在进行过滤。
		注：
		什么时候不等于，走索引了
			https://www.v2ex.com/t/425142
			只有一个字段的话且使用了不等于，数据库优化器会判断候选结果集是否超出了全部结果的 5  %（估计），如果超过，那么就全表扫描。
			附：所以像> < in 这种操作，走不走索引要看本身可能的结果数量。		
最左前缀匹配原则：
	最左匹配原则是针对联合索引来说的。
	应用：
	1. 查找规则1：从最左依序开始应用：
		原理：联合索引根据索引最左列构成b树
		正例：
			1. a = 1 and b = 2 a,b字段都可以使用索引，因为在a值确定的情况下b是相对有序的。
			2.
				a，b，c组合索引。那 a = 1 and c = 2,a字段可以匹配上索引，但c值不可以.
			
				因为联合索引顺序是相对与其前一个辅助关键字，即b值定值(a=1 b=2)情况下，c是有顺序的。！

		反例：
			1. 如果跳过a，直接查 b = 2 这种查询条件就没有办法利用索引，
			因为不知道b为2的节点是在哪。	
			
	2. 查找规则2：遇上范围查询就会停止匹配，剩下的字段都无法使用索引。。
		原理：a值相等的情况下，b值又是按顺序排列的
		例：
			a>1 and b=2，a字段可以匹配上索引，但b值不可以.
			因为a的值是一个范围，在这个范围中b是无序的。
			此处a找完后，b因为无序所以后续节点只能遍历，b其实就没用上索引，所以为什么叫遇上范围查询就会停止。
		？
			虽然是停止匹配但，应该任遍历后续所有索引节点进行对比操作吧，所以任比但索引快吧
			例：
				1.
				索引：ODRAPT_DATE ASC,DRAPT_USER_10 ASC
				sql：select DRAFT_USER_NO from EGOV_RECEIVAL where  DRAFT_DATE > '2000' and DRAFT_USER_NO = 'test'
				耗时：50ms
				分析：
					1	SIMPLE	EGOV_RECEIVAL		type：index	 test多列索引2	test多列索引2	199		108114	3.33	Using where; Using index
				2. 
				索引：ODRAPT_DATE ASC
				sql：select DRAFT_USER_NO from EGOV_RECEIVAL where  DRAFT_DATE > '2000' and DRAFT_USER_NO = 'test'
				耗时：100ms
				分析：
					1	SIMPLE	EGOV_RECEIVAL		type：ALL	test多列索引2				108114	3.33	Using where
			总结：
				通过type应该可以证明，这个思路是对的。
				index:常见于使用索引列就可以处理不需要读取数据文件的查询。