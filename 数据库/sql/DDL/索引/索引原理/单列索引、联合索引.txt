单列索引:
	介绍：
		即一个索引只包含单个列.
	
	应用：
		场景：
			3个字段：nameno, city, age、
			分别在 nameno 建立的是唯一索引，
			city，age上建立普通单列索引，
			此时该表有3个单列索引。
		1. 只应用了一个索引：
			例：
				select * FROM UMS_LOGIN_LOG WHERE UNIT_NAME LIKE '%吕' and nameno = '1300';
			使用explain发现此时这里就只应用了一个索引nameno。
			即虽然有三个索引，但MySQL内部分析后觉的只应用一个索引就能达到目的。
		2. 应用多个索引
			例：
				select * FROM UMS_LOGIN_LOG WHERE city = 'beijing' or age = '13';
			使用explain发现为type为index_merge。
			即查询时应用了多个单列索引，最后取交集或者并集，再去主索引查。
			
			如何才能应用多个索引：(辅助索引什么时候起作用)
				1. 有or时，会使用辅助索引来进行查找
				例：
					上面案例中:查询时使用了多个单列索引.
				？组合索引和单列索引会被同时应用吗
	原理：
		./mysql索引原理.txt
联合索引:
	https://dev.mysql.com/doc/refman/5.7/en/multiple-column-indexes.html
	介绍：
		一个索引包含多个列。
	应用：
	应用多个索引：
		当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的。
		因此组合索引被使用时以最左边的索引列为起点任何连续的索引都能匹配上，直到遇到范围查询(>、<、between、like)就会停止匹配。
		附：
			优化器会自动调整顺序
				如果建立(a,b,c,d)的索引则都可以用到，a,b,c,d的顺序可以任意，因为优化器会自动调整顺序。
			什么时候要用组合索引了：
				看是否会应用到多字段查询
				索引越少则更新成本越低
			同时存在联合索引和单列索引（字段有重复的），这个时候查询mysql会怎么用索引呢。
				这个涉及到mysql本身的查询优化器策略了，当一个表有多条索引可走时, Mysql 根据查询语句的成本来选择走哪条索引；

	例：
		建立组合索引
			ALTER TABLE mytable ADD INDEX name_city_age (name(10),city,age);
		能应用到该组合索引的搜索条件为：
			1. name =、范围查询
				2. 只会应用到name：
					name = ，age = 、范围
			3. name =，city = 、范围
			4. name =，city = ，age  = 、范围
			附：排序也算这里头

	原理：（组合索引怎么构成、如何查找）
		https://www.cnblogs.com/lanqi/p/10282279.html
		我们都知道索引的底层是一颗 B+ 树，那么联合索引当然还是一颗 B+ 树，只不过联合索引的健值数量不是一个，而是多个。
		构建一颗 B+ 树只能根据一个值来构建，因此数据库依据联合索引最左的字段来构建 B+ 树。

		联合索引的实现思路:
			1. 联合索引的索引项的构成，是由所有联合索引字段来的。
			附：
			索引项结构可理解为：
				最左字段a
				第二字段b
				...
			2. 联合索引以最左字段来构成b树。
				//因此最左字段是B树节点排序的依据，因此最左字段就是查询的关键，因为只有它匹配下，才能应用后面的字段。
			3. a值相等的情况下，b值又是按顺序排列的。
			因此查询时可引申出最左前缀原则。
			附：
				某个a值相等太多，一页排不完，是不是最有保存另一页的指针！
			附：
				为什么不把所有索引b也按序排。
					1.没法实现。因为已经以a来构建索引了 2. 没意义。以a构建索引，b可能在第3层，a都找不到你怎么可能找到b了。
				为什么要a固定下b有序了：
					因为这么设计的，才能使联合索引的有意义，如果不这么设计，那么就只能应用道a字段了，b就用不上了，那么组合索引就失去了它的意义。
		例：
			创建一个的联合索引，那么它的索引树是这样的:
				https://zhuanlan.zhihu.com/p/109623980
			废：
				创建一个的联合索引，那么它的索引树是这样的:
					./联合索引B树.png

				1. a b 组合成 BTree的关键字，以a为核心构成了一个b树(即以a值作为节点划分的对比参照物)。

					例：
						可以看到 a的值是有顺序的 1，1，2，2，3，3，而b的值是没有顺序的1，2，1，4，1，2。
						因为a是节点划分参照物，节点上a小于1的都在左边，大于1的都在右边。
					
	最左前缀原则：
		索引条件如何应用索引.txt#最左前缀匹配原则