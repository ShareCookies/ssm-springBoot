https://tech.meituan.com/2014/06/30/mysql-index.html

预读：（磁盘IO与预读）
	磁盘读写，并不是按需读取，而是按页读取。
		附：
			一页大小：
				具体一页有多大数据跟操作系统有关，一般为4k或8k。
			为什么操作系统一次至少读一页数据：
				每一次IO读取的数据我们称之为一页(page)。
				操作系统考虑到磁盘IO是非常高昂的操作，因此做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内。
				附：
					为什么要读取相邻数据：(局部预读性原理)
						因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据科恩大概率也会很快被使用到。
	也就是说我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。
	附：
		为什么很有帮助了：
			通过少量的io次数就找到数据就是索引的真正目的。
			那么因为利用io预读特性，我们使用b树数据结构实现仅需操作少量的节点(io页)，就可找到所需数据所在叶节点。
			如何操作少量节点：
				节点仅存储数据范围，我们通过1级范围找到下级更精确的范围，最后找到数据所在页。
BTREE索引原理：(聚簇BTREE索引原理)
	b+树如何存放数据：
		指针磁盘块（节点）：
			浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示）。
			例：
				磁盘块1包含数据项17和35，包含指针P1(P1表示小于17的磁盘块)、P2(P2表示在17和35之间的磁盘块)、P3(P3表示大于35的磁盘块)。
		数据磁盘块（叶节点）：
			真实的数据存在于叶子节点。
				即3、5、9、10、13、15、28、29、36、60、75、79、90、99。
			非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项。
				如17、35并不真实存在于数据表中。
		例图：
			b+树如何存放数据.jpg
	b+树如何查找数据：
		例：
		主键BTREE索引
			1.如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针。
				附：
					内存时间因为非常短（相比磁盘的IO）可以忽略不计
			2.通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针。
			3.通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。
			注：
				真实的情况下，3层的b+树可以表示上百万的数据？，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。

	b+树目的：查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。