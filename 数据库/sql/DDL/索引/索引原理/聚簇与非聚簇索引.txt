索引的存储结构：
介绍：
	MySQL索引使用的数据结构主要有BTree索引 和 哈希索引 。
	mysql默认BTree索引。
哈希索引:
	底层的数据结构是哈希表.
	优缺点:
		hash索引，等值查询效率高
		不能排序,不能进行范围查询
BTree索引:
	介绍：
		底层的数据结构是b树.
			即用关键字排序构成一个b树。
	数据存储方式：
		介绍：
			MySQL的两种主流存储引擎的BTree索引数据存储方式是不同的。
				即使用索引构成一个B+树，但索引对应的实际数据存储方式不同。
			InnoDB:
				InnoDB索引的数据文件就存储在索引上，即叶节点上。
				聚簇索引：
					goto： 聚簇与非聚簇索引
			MyIsam：
				MyISAM索引文件和数据文件是分离的。
				非聚簇索引：
					goto： 聚簇与非聚簇索引

	
	聚簇与非聚簇索引：(数据存储方式)
		https://blog.51cto.com/2839840/2057806?utm_source=oschina-app
		注：
			MyISAM采用非聚集索引，InnoDB 采用聚簇索引。
		介绍：
			有两种常见的方法可以解决多个B+树访问同一套表数据的问题，一种叫做聚簇索引（clustered index ），一种叫做非聚簇索引（secondary index）。
			附：
				这两个名字虽然都叫做索引，但这并不是一种单独的索引类型，而是一种数据存储方式。
		聚簇索引：
			1. 对于聚簇索引存储来说，行数据存储在主键B+树叶子节点上 。
				
					即主键构成BTREE节点，树的叶节点保存了完整的数据记录(data域)。
				？
					那主键B树所有叶节点有都读取到缓存中吗，应该没有吧，不然不是太大了
			2. 非主键索引构成的B+树叶子节点存储的是主键。
				附：
					1. 因此使用辅助索引进行查询需要两次，先查询到主键，然后再通过主键索引查询到数据。
			
			附：
				因此 InnoDB 必须要有主键？
				
			总结：
				构成BTREE索引节点的关键字是数据表的主键，叶节点则是数据文件本身。
				而其余的索引都作为辅助索引，辅助索引的叶节点(data域)存储则存储主键。
		非聚簇索引:
			对于非聚簇索引存储来说，主键B+树在叶子节点存储指向真正数据行的指针，而非主键。
			...
			主键索引和辅助索引则是完全是独立的树,各自都保存了指向数据的指针。