CURD代表创建（Create）、更新（Update）、读取（Retrieve）和删除（Delete）操作。

DML:数据库操作语言
	增加:
		例：
		INSERT INTO user( name, password, realname) VALUES ('1','1','1')
		注：括号不能省略
	删除:
		例：
		DELETE FROM Websites WHERE name='百度' AND country='CN';
		多列删除：
			delete from 表 where id in ('37','38')
	修改:
		例：
		UPDATE user SET password='admin'  where 'password'=11	--修改指定数据
		UPDATE user SET password=11 
		--注：省略了 WHERE 即默认为WHERE 1，那么会将password列的所有值设为11

	查询：
		基础关键字:
		介绍：select ；where；as；union；exists...
		as：取别名
		例：
			select rec.name as "rowCode1" from fund as rec;
			简写:select rec.name "rowCode1" from fund rec;
		union：
			介绍：用于合并两个或多个 SELECT 语句的结果集。
			注:
			1.UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。
			2.默认UNION 操作符选取不同的值,如果允许重复的值，请使用 UNION ALL。
			样例：
			SELECT * FROM financial_account UNION ALL SELECT * FROM financial_account;
		exists:
			样例：
			select * from user where exists (select * from user)
			where 运算符：
			where位置：
			from 后 ，order by前
			where比较符1：
			=	等于
			<>或 !=	不等于。
			>	大于		>=	大于等于
			<	小于		<=	小于等于
			BETWEEN	在某个范围内
			样例：
			SELECT * FROM `fund` WHERE price between 3 and 4
			SELECT * FROM `fund` WHERE price >=3 and price <=4	--比较运算符号实现between功能
		where比较符：
		LIKE：
			模糊查询：
			% 	表示多个字值。
			_ 	表示一个字符。
			[] 匹配括号中任意一个字符。
			[^] 不匹配括号中任意一个字符

			样例：
			SELECT *  FROM  `fund`  WHERE name LIKE  '%华__' 	--查询倒数第3位为华的内容
			精准查询：
			样例：
			SELECT *  FROM  `fund`  WHERE name LIKE  '新华基金' 
		IN	
			介绍：指定某个列的多个可能值
			样例：
			Select * from fund where price in (2,3);
			特殊条件:
			空值判断： is null
			样例：
			Select * from user where realname  is   null;
		逻辑运算符：
			符号：()    not        and         or
			逻辑运算的优先级：
			()    not        and         or
			()
			介绍：被()的内容会被当作一个整体，不会被拆开运算
			样例：
			SELECT * FROM fund	WHERE price > 2	 
			AND (id>'10' OR id=1);
		子查询：
			https://blog.csdn.net/qq_27623337/article/details/52814235
			子查询作为数据源：
			样例：
			SELECT     M.Name AS ProductName  FROM        
			(SELECT     Name, ProductModelID
			 FROM    Production.ProductModel) AS M 
			子查询作为选择条件：
			样例：
			.. WHERE 某字段 IN  (SELECT 某字段 FROM .. WHERE ..)
			注:
			1.not  in 为不存在
			2.()中条件只允许返回一个字段，即 in引导的子句只能返回一个字段
			3.not  in 的()查询中返回的任意一条记录含有空值，则整个查询将不返回任何记录。

			注：
			SQL JOIN 中 on 与 where 的区别 ?
		排序：
			位置：where后，limit前
			介绍：ORDER BY 用于对结果集按照一列或多列进行排序。
			注：
			1.asc 升序（默认）；desc 降序
			2.可排序数字，英文，中文
			英文根据字母排序。
			中文根据？排序
			样例：
			SELECT * FROM `fund` WHERE 1 ORDER BY price DESC
		多字段排序：
			1.SELECT * FROM fund ORDER BY createTime DESC,price asc;
			先是按 createTime 降序排列  （优先）
			如果 createTime  字段 有些是一样的话   再按price 升序排列 (前提是满足createTime 降序排列)
			总结：当第一个条件相等时，才会用第二个条件去排序
			限制条数：
		limit ：
			介绍：
			 LIMIT 关键字用于强制指定 SELECT 语句返回的记录数。
			位置：
			order 后，即sql语句最后
			用法：
			limit 数据偏移量（即默认从第一条记录开始输出）
			limit 输出记录的初始位置,数据偏移量（即输出几条记录）
			样例：
			SELECT * FROM 表名 LIMIT 8;	--从表获取8条数据
			SELECT * FROM 表名 LIMIT 10,3;	--从第11条记录开始查询3条记录
			注：
			1.先降序排序在limit可获取最新记录
			2. LIMIT 8 就是limit 0,8
		distinct：选取不重复的行
			介绍：
			在表中，一个列可能会包含多个重复值，distinct能输出列中不同的值。
			位置：
			select 后，筛选的列名 前
			样例：
			SELECT DISTINCT status FROM fund	--输出status不同的行
			SELECT DISTINCT status,id FROM fund	--输出id和status均不同的行
			函数：
			group_concat([DISTINCT]  [Order BY ASC/DESC ] [Separator ''])：
			介绍：把分组后的某字段值，以分组形式打印成一行
			https://blog.csdn.net/HibonLi/article/details/72897486
			样例：
			以id分组，把去冗余的name字段的值打印在一行
			select id,group_concat(distinct name) from aa group by id;