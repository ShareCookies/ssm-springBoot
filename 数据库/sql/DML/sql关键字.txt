mysql sql注意事项：
	1.判断某字段为空	is null
	2.某字段不为空	is not null
	3.where status!=4 不会列出（比较）为null的
		!
	4.mysql字段值默认不区分大小写，以二进制形式保存的区分大小写

	附：
		1.SQL关键字不区分大小写：
			如create CREATE 同效
		2.
			分号是在数据库系统中分隔每条 SQL 语句的标准方法。
			这样就可以在对服务器的相同请求中执行一条以上的语句。
		3.变量值用单应号包裹
			如where id = '1111'
关键字：
	as 取别名 :
		mysql：
			例：
			select rec.name as "rowCode1" from fund as rec;
			简写:select rec.name "rowCode1" from fund rec;
		oracal：
			不用引号包裹：
				select  test as tt  from  rooms;
				返回：
					TT
					返回字段全大写
			用双引号包裹：
				select  test as "tT"  from  rooms;
				返回：
					tT
				注：
					as 后的t 不能用 '' 包裹。
			https://blog.csdn.net/sosous/article/details/36177165
	union 合并结果集：
		UNION 操作符用于合并两个或多个 SELECT 语句的结果集。
		mysql：
			例：
			SELECT * FROM financial_account UNION SELECT * FROM financial_account;
			注:
			1.UNION 结果集中的列名要总是等于 UNION 中第一个 SELECT 语句中的列名。
			2.默认UNION 操作符选取不同的值,如果允许重复的值，请使用 UNION ALL。
			3. 不推荐使用union，优先union all
		Oracle：
			Oracle用union连接时报字符集不匹配异常：
			解决方案：
				1.修改数据库字段类型
				2.使用cast()函数进行类型转换
			注：
				用’’做了一个默认值，数据库默认为varchar2
	distinct：选取不重复的行
		介绍：
			在表中，一个列可能会包含多个重复值，distinct能输出列中不同的值。
			位置：
				select 后，筛选的列名 前
		样例：
			SELECT DISTINCT status FROM fund	--输出status不同的行
			SELECT DISTINCT status,id FROM fund	--过滤掉 id和status 相同的行
		附：
		group_concat函数：
			group_concat([DISTINCT]  [Order BY ASC/DESC ] [Separator ''])：
			https://blog.csdn.net/HibonLi/article/details/72897486
			样例：
				以id分组，把去冗余的name字段的值打印在一行
				select id,group_concat(distinct name) from aa group by id;
	join：表连接
		./sql详细/表连接
		注：
			SQL JOIN 中 on 与 where 的区别 ！
		JOIN原理：
			mysql5.5

	推荐:
		1. 能在应用上做的算好的都提前算好。
			数据库是最底层的，瓶颈往往是数据库。建议数据库只是作为数据store的工具，而不要添加业务上去。
		2. join等可以不用就不用，宁可进行多次单表查询然后合并。
		为什么多次单表查询：
			高性能mysql p203
			因为毕竟后期分表分库处理也麻烦等，而且join嵌套查询...
			！:代确认

			JOIN：
				https://www.cnblogs.com/maohuidong/p/10399638.html
				JOIN的话它是走嵌套查询的。小表驱动大表，且通过索引字段进行关联。
				如果表记录比较少的话，还是OK的。大的话业务逻辑中可以控制处理。

	子查询：in (not in)
		https://blog.csdn.net/qq_27623337/article/details/52814235
		子查询作为数据源：
			样例：
			SELECT M.Name AS ProductName  FROM (SELECT Name,ProductModelID FROM Prod7uction.ProductModel) AS M
		子查询作为筛选条件：
			例：
				.. WHERE 某字段 IN  (SELECT 某字段 FROM .. WHERE ..)
			附：
				()中条件只允许返回一个字段，即 in引导的子句只能返回一个字段!
		注:
			1.not  in 为不存在
				?
					not  in 的()查询中返回的任意一条记录含有空值，则整个查询将不返回任何记录。

	子查询检查:exists （NOT EXISTS）
		介绍：
			https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html
			If a subquery returns any rows at all, EXISTS subquery is TRUE, and NOT EXISTS subquery is FALSE.
			EXISTS用于检查子查询是否至少会返回一行数据,子查询实际上并不返回任何数据,而是返回值True或False
			即：
				先查外表所有结果，然后把外表值代入到子查询中，进行子查询检查。
			注：
				常用于外小内大，或根本不用。
			附：
				1. 所以子查询检查的select 其实并没有用，mysql自动忽略。
				MySQL ignores the SELECT list in such a subquery, so it makes no difference.
		例：
			https://blog.csdn.net/wxf_suzhou/article/details/82962515
			场景：
				表A
					ID   NAME
					1       A1
					2       A2
					3       A3
				表B
					ID   AID   NAME
					1       1       B1
					2       2       B2
					3       2       B3
				表A和表B是１对多的关系   A.ID   =>   B.AID

			1.SELECT ID,NAME FROM A WHERE EXISTS (SELECT * FROM B WHERE A.ID = B.AID);
			执行结果:
				ID   NAME
				1       A1
				2       A2

		原理如下:
			遍历表a结果，然后把表a拿去嵌套(索引)循环表b，有值exists返回true，然后返回a表结果。
	注：
		SQL中in、exist效率.txt

	BETWEEN	：列范围
		列值在某个范围内
		样例：
		SELECT * FROM `fund` WHERE price between 3 and 4
		SELECT * FROM `fund` WHERE price >=3 and price <=4	--比较运算符号实现between功能
	运算符：
		比较符运算符：
			=	等于
			<>或 !=	不等于。
			>	大于		>=	大于等于
			<	小于		<=	小于等于
		逻辑运算符：
			符号：()    not        and         or
			逻辑运算的优先级：
				()    not        and         or
			()：
				介绍：被()的内容会被当作一个整体，不会被拆开运算
				样例：
				SELECT * FROM fund	WHERE price > 2
				AND (id>'10' OR id=1);
			or and：
				https://blog.csdn.net/bingguang1993/article/details/79657256
				注：
					or and 混用最好加括号
					./例/or and混用.txt
	CASE WHEN :(条件语句，类似if else)
		./sql详细/CASE WHEN.txt
		？
		case when then效率：
			where前使用影响不大:
				写在结果列表或者常量的转换,对性能影响不大
				注：但如果同时有对then排序则很影响性能。
				？
					其原因可能是先对所有符合数据进行case计算然后在排序(那不是要两边全局遍历？不应该速度很慢？)（猜测错误率很高）
					select *,CASE  BUSINESS_PRIORITY WHEN  '普通' THEN 0  ELSE  1  END   FLAG   from FLOW_WORK_TODO  order by  FLAG   LIMIT 100000,100 ;
					80W耗时:2.3
					select *,CASE  BUSINESS_PRIORITY WHEN  '普通' THEN 0  ELSE  1  END   FLAG   from FLOW_WORK_TODO  order by  IS_SHOW   LIMIT 100000,100 ;
					80W耗时：3s
					为什么1还会比2快？
			where后使用影响稍微大
				如果写在where的字段判断，相当于使用了函数
			总结：关键是WHERE筛选后的数据量，如果数据量小则无所谓了
			？
				case具体原理是什么了：可能是解析器根据根据不同的位置等会以不同的策略和方式来执行吧
				case when 能走索引吗
					select *,CASE  BUSINESS_PRIORITY WHEN  '普通' THEN 0  ELSE  1  END   FLAG   from FLOW_WORK_TODO  order by  FLAG   LIMIT 10000,100 ;
					对BUSINESS_PRIORITY加了索引，并不会提高效率还是文件排序

	LIKE：
		模糊查询：
		% 	表示多个字值。
		_ 	表示一个字符。
		[] 匹配括号中任意一个字符。
		[^] 不匹配括号中任意一个字符

		样例：
		SELECT *  FROM  `fund`  WHERE name LIKE  '%华__' 	--查询倒数第3位为华的内容
		精准查询：
		样例：
		SELECT *  FROM  `fund`  WHERE name LIKE  '新华基金'
	ORDER BY 排序：
		介绍：
			ORDER BY 用于对结果集按照一列或多列进行排序。
			位置：where后，limit前
		样例：
			SELECT * FROM `fund` WHERE 1 ORDER BY price DESC
		注：
			1.asc 升序（默认）；desc 降序
			2.可排序数字，英文，中文
			英文根据字母排序。
			中文根据？排序
		多字段排序：
			1.SELECT * FROM fund ORDER BY createTime DESC,price asc;
			先是按 createTime 降序排列  （优先）
			如果 createTime  字段 有些是一样的话   再按price 升序排列 (前提是满足createTime 降序排列)
			总结：当第一个条件相等时，才会用第二个条件去排序
	limit 返回数限制：
		介绍：
		 	LIMIT 关键字用于强制指定 SELECT 语句返回的记录数。
			位置：
				order 后，即sql语句最后
		用法：
			limit 数据偏移量（即默认从第一条记录开始输出）
			limit 输出记录的初始位置,数据偏移量（即输出几条记录）
		样例：
			SELECT * FROM 表名 LIMIT 8;	--从表获取8条数据（LIMIT 8 就是limit 0,8）
			SELECT * FROM 表名 LIMIT 10,3;	--从第11条记录开始查询3条记录
		注：
		1.先降序排序在limit可获取最新记录
	group by:分组
		./sql详细/分组group by
HAVING
	...

