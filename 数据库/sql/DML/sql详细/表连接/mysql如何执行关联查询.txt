mysql如何执行关联查询：《高性能mysql》 p214
	介绍：
        当前MySQL(5.0)关联执行的策略很简单:MySQL对任何关联都执行嵌套循环关联操作。
		嵌套循环查询：
			即MySQL先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为止。
	嵌套循环查询原理：
		https://www.jianshu.com/p/38a8b99798a1
		https://blog.csdn.net/weixin_42740530/article/details/108225033
		驱动表与被驱动表的概念
			驱动表是表连接中的基础表，也就是通过驱动表的数据结果集作为循环基础数据，然后一条一条的通过这个结果集的数据作为过滤条件到被驱动表中查询数据，然后合并。

		驱动与被驱动
			左连接中 左表是驱动表，右表是被驱动表
			右连接中 右表是驱动表，左表是被驱动表
			内连接中 表数据量较小的表会由mysql自动选择作为驱动表去驱动大表
				附：
				1. 有一个重点是，如果where条件存在的话 mysql会根据where实际条件进行驱动表的选择
				2. sql优化中，一个比较重要的点就是要用小表驱动大表

		原理：
			mysql表关联的算法，是通过驱动表去循环被驱动表。
			例：
				20w的大表和200条的小表。
				如果大表驱动，那么是20w条记录外循环，内循环200条去连接查找，需要通过20w次连接。
				如果小表驱动，那么是200条记录外循环，内循环20w条去连接查找，只需要通过200次连接就可以了。
				并且驱动表是不会使用索引的。


		
		附：
            关联其实就2种：
                1. 笛卡尔积
                    原理：就是嵌套循环查询
                2. 根据关联字段进行关联
                    原理：嵌套循环查询+where条件筛选
          
        附：！
            MySQL认为任何一个查询都是一次“关联”，并不仅仅是一个查 询需要到两个表匹配才叫关联，
            所以在MySQL中，每一个查询，每一个片段(包括子查询，甚至基于单表的SELECT)都可能是关联。
            即有些查询其实现就是嵌套循环查询。

    测试案例：
        EGOV_RECEIVAL：112887。索引：id主建、FLOW_PID索引
        FLOW_PROCESS_INSTANCE：122665。索引： id主建

        仅关联：
            SELECT * FROM EGOV_RECEIVAL r INNER JOIN FLOW_PROCESS_INSTANCE p ON r.FLOW_PID = p.ID
            //3s 查出96000条

            id：1	table:r表 type：ALL	rows：107536
            id：1	table:p表 type：eq_ref	key：PRIMARY ref：r.FLOW_PID rows：1
            分析：
				type：eq_ref
					关联中，该表作为被驱动表，且只有一条数据符合每次循环要求要求。
				rows：1
					扫描行数为1，指的是该表作为被驱动表 每次循环中只有1条符合要求。
					但这里会被循环107536次。

				附：
					explain同id第二个(p表)是驱动表
		
		关联，并使用有索引的筛选条件：
            SELECT * FROM EGOV_RECEIVAL r INNER JOIN FLOW_PROCESS_INSTANCE p ON r.FLOW_PID = p.ID where p.ID = 'W-4lI-SwQwQ9PF0U';
            //0.034s 查出一条记录

            id：1	table:p表		type：const	key：PRIMARY 	ref：const	rows：1
            id：1	table:r表		type：ref	key：testForJoin	ref：const	rows：1

            分析：
                因为p有where条件筛选，所以先根据条件查询出p的数据，然后在把p的结果拿去r进行关联查询
        关联，并使用无索引的筛选条件：
            SELECT * FROM EGOV_RECEIVAL r INNER JOIN FLOW_PROCESS_INSTANCE p ON r.FLOW_PID = p.ID where p.DRAFT_USER_NO = '1300B00081217030';
            //0.4 查出4498条数据

            id：1	table:p		type：ALL	key：PRIMARY				rows：119184	filter：10.00	extra：Using where
            id：1	table:r		type：ref	testForJoin	key：testForJoin	ref：p.ID	rows：1

            分析：
                因为p有where条件筛选，所以先根据条件查询出p的数据，然后在把p的结果拿去r进行关联查询。
                p.DRAFT_USER_NO因为无索引，所以其就是全表遍历，然后在服务层筛选(extra：Using where)出符合的数据。(filter：10.00筛选结果为百分之十符合)

            附：
                where没有索引查询也比只查询快很多，很大可能时因为数据量大，大部分耗时在传输的过程了。
附：
连接算法：
	https://www.cnblogs.com/shangyu/p/6055181.html
	hash join是一种数据库在进行多表连接时的处理算法，对于多表连接还有两种比较常用的方式：sort merge-join 和 nested loop。 
	对于不同的查询方式，使用相同的join算法也会有不同的代价产生，对于具体使用哪一种连接方式是由优化器通过代价的衡量来决定的。
	nested loop join
		嵌套循环连接，是比较通用的连接方式，分为内外表，每扫描外表的一行数据都要在内表中查找与之相匹配的行。
			(即对嵌套的内表进行不断循环)
		附：
		    没有索引的复杂度是O(N*M)，这样的复杂度对于大数据集是非常劣势的，一般会通过索引来提升性能。
 　 sort merge-join
		merge join需要首先对两个表按照关联的字段进行排序，分别从两个表中取出一行数据进行匹配，如果合适放入结果集；不匹配将较小的那行丢掉继续匹配另一个表的下一行，依次处理直到将两表的数据取完。
		merge join的很大一部分开销花在排序上，也是同等条件下差于hash join的一个主要原因。
	hashjoin：
		https://www.cnblogs.com/shangyu/p/6055181.html
		原理：
			对于简单的两个表来讲，hash-join就算将两表中的小表（称S）作为hash表，然后去扫描另一个表(称M)的每一行数据，用得出来的行数据根据连接条件去映射建立的hash表，hash表是放在内存中的，这样可以很快的得到对应的S表与M表相匹配的行。
			hash-join只适用于等值连接，对于>, <, <=, >=这样的查询连接还是需要nested loop这种通用的连接算法来处理。
            附：
                对于结果集很大的情况，merge-join需要对其排序效率并不会很高，
                而nested loop join是一种嵌套循环的查询方式无疑更不适合大数据集的连接，
                而hash-join正是为处理这种棘手的查询方式而生，尤其是对于一个大表和一个小表的情况，基本上只需要将大小表扫描一遍就可以得出最终的结果集。
            附：
                如果连接key本来就是有序的或者需要排序，那么可能用merge-join的代价会比hash-join更小，此时merge-join会更有优势。
		附：
			mysql5.7不支持hashjoin，mysql8支持了hashjoin。
				https://dev.mysql.com/doc/refman/5.7/en/
				https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html
			hashjoin其实还有很多需要考虑和实现的地方，比如数据倾斜严重如何处理、内存放不下怎木办，hash如何处理冲突等，这些并不是本文介绍的重点，不再详述，每个拿出来都可以再讲一篇了。				
		
		
				
废弃:
	通过案例学习关联查询原理：
		SELECT tbl1.col1, tbl2.col2
		FROM tbl1 INNER J0IN tbl2 USING( col3)
		WHERE tbl1.col1 IN(5,6);
		解析：
			假设MySQL按照查询中的表顺序进行关联操作，我们则可以用下面的伪代码表示
			MySQL将如何完成这个查询:
				outer_iter = iterator over tbl1 where col1 IN(5,6)//1. 找出tab1所有符合where条件数据
				outer_row = outer_iter.next
				while outer_row //2. 遍历1结果
					inner_iter = iterator over tbl2 where col3 = outer_row.co13 //3. 关联字段通过where在tbl2中进行条件筛选
					inner_row = inner_iter.next
					while inner_row // 遍历输出3.结果
						output [outer_row.col1, inner_row.col2]
						inner_row = inner_iter.next
					end
					outer_row = outer_iter.next
				end
		附：
			通过泳道图展示MySQL如何完成关联查询:
				./关联查询泳道图.png
		附：
			是一定会先遍历tab1，在把tab1结果拿去循环tab2吗.
				不是，mysql会根据内部的分析优化结果，选择先遍历那个表。
				根据测试案例中(仅关联：)和(关联，并使用无索引的筛选条件：)可以得出该结论。
			关联中where的作用：
				能提高关联效率。
				mysql通常把有where筛选条件的作为循环外表。
					根据测试案例中(仅关联：)和(关联，并使用无索引的筛选条件：)可以得出该结论。
