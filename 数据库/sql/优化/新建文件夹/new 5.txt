存储引擎的事务特性能够保证在存储引擎级别实现ACID。
而分布式事务则让存储引擎级别的ACID可以扩展到数据库层面（可以扩展到多个
数据库之间）。
这需要通过两阶段提交实现。
	MySQL5.0和更新版本的数据库已经开始支持XA事务了。

第一阶段：
	XA事务中需要有一个事务协调器来保证所有的事务参与者都完成了准备工作(第一阶段)。
第二阶段：
	如果协调器收到所有的参与者都准备好的消息，就会告诉所有的事务可以提交了。
	(提交的过程如果失败了？)
		第二阶段异常情况划分：
			https://segmentfault.com/q/1010000014439562?utm_source=sf-similar-question
		xa事务第二阶段失败如何回滚了？
MySQL在这个XA事务过程中扮演一一个参与者的角色，而不是协调者。
实际上，在MySQL中有两种XA事务。一方面，MySQL可以参与到外部的分布式事务中;另-方面，还可以通过XA事务来协调存储引擎和二进制日志。？


附：
如果不使用XA协议，例如，跨存储引擎的事务提交就只是顺序地要求每个存储引擎各自提交。
如果在某个存储提交过程中发生系统崩溃，就会破坏事务的特性(要么就全部提交，要么就不做任何操作)。


附：
MySQL内部xa事务：
	如果将MySQL记录的二进制日志操作看作一个独立的“存 储引擎”，就不难理解为什么即使是一个存储引擎参与的事务仍然需要XA事务了。
	在存储引擎提交的同时，需要将“提交”的信息写入二进制日志，这就是一个分布式事务，
	只不过二进制日志的参与者是MySQL本身。
	...p307
MySQL外部xa事务：
	...