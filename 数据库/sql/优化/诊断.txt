问题定位：
	首先你要定位到问题所在：
		1.网络问题（访问到应用的过程问题）
			诊断方式：
				方式1：换终端换网段等进行快速测试
				方式2：tracert、ping等命令测试
		2.应用问题，
			追踪方向：
				1.应用并发量过大
					附：跟cpu有关，通常tomcat并发量200为佳
				2.应用性能（服务器cpu，内存，io，进程等）
					附：看代码逻辑中是否有大I/O,高强度计算，大并发
				...
		3.数据库问题。
			诊断方式：
				并发模拟或实际情况下，通过下面的追踪方向来诊断。
			追踪方向：
				1.锁等待（如果数据库性能消耗不高，此时通过事务等来判断是否锁问题导致慢sql。）
					介绍:
						../事务/锁机制.txt
					诊断方式：
						查询正在执行的事务：SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX\G（推荐mysql客户端执行\G便于复制出来查看）
						../事务/释放锁.txt
					解决方案：
						goto：../事务/锁机制.txt InnoDB行锁优化建议
				2.数据库性能不够（优先看数据库性能，因为诊断较快。）
					诊断方式：
						1. 监控服务器性能：
							使用top等命令监控linux服务器性能。（cpu，内存，平均负载，进程占用资源情况...）
						附 2. 数据库连接数是否充足
							Navicat Monitor
						附 3. 查看数据库线程情况： 
							https://www.cnblogs.com/duhuo/p/5678286.html
							通过 show processlist 来判断数据库性能，连接数，慢sql堆积，网络状况等各种情况...
							附：
								https://www.cnblogs.com/remember-forget/p/10400496.html
								https://blog.csdn.net/dhfzhishi/article/details/81263084
								https://www.cnblogs.com/hixiaowei/p/10934484.html
						以上诊断方式通常结合起来使用，1快速看服务器性能，2提到的工具操作简单，3综合能力较强。
							
						附：
							Navicat Monitor等监控工具。
					解决方案：
						1.增加性能：
							1. 服务器太low，换更好服务器
							2. 闭眼开始集群或读写分离。
						2.sql优化（问题优化）：
							先找出导致问题的sql语句，例有问题的时间段有那些慢sql等。
							诊断方式：
								1：并发模拟，或发生问题时现场诊断。
									附：
									并发模拟工具：
										https://github.com/yuyumyself/UtilsProject/blob/master/Utils/src/main/java/com/china/hcg/thread/ThreadPoolUtilsDemo.java
								2.
									通过druid（判断那个类型sql慢），mysql慢查询（具体是那个sql慢，有参数的）等来判断是那个sql有问题。
							解决方案：
								1.走缓存
									附：缓存部分清空。失效后能否在业务低峰期在重新加载Redis缓存。
								2.优化代码逻辑，根据所需数据，看看能否少掉这个sql或少掉部分sql。
								3.sql优化：
									1. 通过explain优化sql，尽量全部走索引。
									2. 少关联表，不要超过3个表的多表关联。
										关联越多，影响因素越多，且数据量是递增级别。
									3. 复杂sql拆分成多个SQL查询。
										这样可以避免语句相互之间影响。
										让语句简洁易懂，好维护才是王道。
									4. 通过程序把查询结果带入，通过程序合并sql结果，让程序来负担一部分数据库压力。							
		例：
			例1接口大并发时慢：
				1. 是没问题的
				2. 应用也是不会有问题的，应用服务器性能稳定，且代码逻辑中没有什么大io操作，或计算等耗时操作等。
				3. 那么问题应该就是数据库层面问题。
				思路：
					优先看数据库性能，因为诊断较快。
					druid清空，开启慢sql，然后并发模拟。
					发现数据库性能消耗是较高，且druid（判断那个类型sql慢）和慢sql（具体是那个sql慢，有参数的）中均发现大量耗时sql。（这种情况实际环境中更为明显）
					因为均为查询接口，所以无需关心锁的问题，那么此时就尽量进行查询sql优化来进行初步调整。结果并发模拟和实际是得到了不错结果。
					如果未得到较好结果在尝试缓存，代码逻辑优化，集群等方案，因为问题总得解决如果不解决直接上这些方案，只是进行了问题掩盖，雷还是在的。
				附：
					1. 为什么只是查询sql无需关心锁问题：
						因为只是查询，那么也只会加共享锁才对，而共享锁下查询可以并发。
						附：
							要查询的数据，被别的给加了排他锁。
							如果是这种情况，那么就要整个应用查找哪里会有更新语句，然后尽量缩小其锁定范围。
					2. 大量慢SQL堆积导致CPU资源打满，整体数据库的性能下降。
						当未走索引或多表关联等进行大量查询时，此时数据库会调用cpu资源在硬盘中进行大量的io操作和查询，这是很耗费系统资源的。
				附（废弃）：
					接口的核心sql语句单独执行发现并没有很慢，那么此时可得到什么结论了：
						嗯，核心接口表并没有被锁。但数据库性能不够并不能完全排除
			例2：
				https://blog.csdn.net/weixin_41715077/article/details/102607330
	附：
		druid：
			druid是一个JDBC组件，它包含了数据库连接池和数据库访问性能监控等。
			在监控页面中我们可以看到：请求耗时（一个请求到应用后面的耗时），sql耗时等。
			监控页面：
				http://ip:端口/druid/ 
		如何诊断页面为何加载慢：
			统计打开页面耗时：
				如果页面打开慢，那么就看下打开这个页面要那些请求，然后看下这些请求的发起与加载时间，然后统计最终要加载的耗时。
			统计方式：	
				可在谷歌的network那条时间轴上滑动来快速的确认请求的发起顺序和时间。
				例：
					阅办单的载是跟这三个请求有关，根据各种手段分辨出 1完-2完（1结束开才始）-3完（2结束开才始），最终3个请求加起来计算出页面耗时。

sql问题诊断：
	查询问题：
		1.先找出那个sql慢。
		查看方式：
			1.通过druid等看出那个sql查询慢。
			2.开启mysql慢查询日志，找出那个sql查询慢。
		附：
			慢查询日志：
				goto: 慢查询日志(slow log)
		
		2.分析sql慢原因：
			查询计划：
				https://www.cnblogs.com/tufujie/p/9413852.html
				https://blog.csdn.net/liufuchun111/article/details/85166481
				介绍：
					EXPLAIN 命令，是 MySQL 查询优化的必备工具，可以查看SELECT语句的执行的计划。
						mysql的执行计划查看相对oracle简便很多,功能也相对简单很多。
					explain extended：
						https://www.cnblogs.com/duanxz/p/3564468.html
						使用该命令输出多了warning。
						这个 warning中显示了MySQL对SQL的解释，从这个解释中我们可以看到SQL的执行方式，对于分析SQL还是很有用的。
				附：
				执行计划结果的查看：
                    ./explain.txt
附：
	ajax请求：
		https://zhidao.baidu.com/question/984180091419371739.html?qbl=relate_question_0&word=%C8%E7%BA%CE%B4%D3%BF%D8%D6%C6%CC%A8%D6%D0%BF%B4%B3%F6%C4%C7%D0%A9%CA%C7%CD%AC%B2%BD%C7%EB%C7%F3%BB%B9%CA%C7%D2%EC%B2%BD%C7%EB%C7%F3
		同步ajax请求不会阻塞页面，只会堵塞Ajax请求本身。
		Ajax异步和同步的区别是：
			当Ajax请求开始时，异步请求路径后，不管请求结度果，直接进行运行到下一步，相当于在Ajax时开了一个新线程；
			而同步请求时，访问请求路径后，等待请求完成，然知后在进行下一步。但是这两个请求道是不会堵塞页面本身的，click事件本身就是异步的。所以多次点击会导致请求多次。
	mysql查询缓慢原因和解决方案
		https://blog.csdn.net/weberhuangxingbo/article/details/80694045
	mysql数据库最大能支持多少并发量
		https://bbs.csdn.net/topics/380001502?page=2
		看系统支持
	查看MySQL线程
		
		show processlist 是显示用户正在运行的线程，需要注意的是，除了 root 用户能看到所有正在运行的线程外，其他用户都只能看到自己正在运行的线程，看不到其它用户正在运行的线程。除非单独个这个用户赋予了PROCESS 权限。
		例：
			查看前100条：SHOW PROCESSLIST

	    附：
            使用 show full processlist 命令可以查看mysql服务端某些线程的状态
                Sleep 正在等待客户端发送新的请求
                Query 正在执行查询， 或者发结果发给客户端
                Locked 正在等待表锁（注意表锁是服务器层的， 而行锁是存储引擎层的，行锁时状态为query）
                Analyzing and statistics 正在生成查询的计划或者收集统计信息
                copying to tmp table 临时表操作，一般是正在做group by等操作
                sorting result 正在对结果集做排序
                sending data 正在服务器线程之间传数据
	MySQL的日志:
		MySQL的日志主要有以下6种：
		1.错误日志(error log)：
			介绍：
				1. 在 MySQL 数据库中，默认开启错误日志功能。
					
				2. 错误日志中记录着开启和关闭 MySQL 服务的时间，以及服务运行过程中出现哪些异常等信息。如果 MySQL 服务出现异常，可以到错误日志中查找原因。
				附：
					1. 
						SHOW VARIABLES LIKE 'log_error';//在 MySQL 中，通过 SHOW 命令可以查看错误日志文件所在的目录及文件名信息。
					2. MySQL 配置文件 log_error 选项
						[mysqld]
						log-error=dir/{filename}
		2.查询日志(general log)：客户端连接和执行的语句。
			打开MYSQL的全局请求日志：
				show variables like '%general_log%';
				set @@global.general_log='ON';
		3.二进制日志(bin log)：
			https://blog.csdn.net/demonson/article/details/80664141
			介绍：
				MySQL的二进制日志（binary log）是一个二进制文件，主要用于记录修改数据或有可能引起数据变更的MySQL语句
					即：
						1. 二进制日志（binary log）中记录了对MySQL数据库执行更改的所有操作，并且记录了语句发生时间、执行时长、操作数据等其它额外信息，
						2. 但是它不记录SELECT、SHOW等那些不修改数据的SQL语句。
				
				二进制日志作用：
					二进制日志（binary log）主要用于数据库恢复和主从复制，以及审计（audit）操作。

			附：
				二进制日志默认开启！
				二进制日志状态查看
					show variables like 'log_bin';
				查看当前服务器所有的二进制日志文件
					show binary logs;
				查看当前二进制日志文件状态
					show master status;

			
			
		4.慢查询日志(slow log)：
			https://www.cnblogs.com/davidwang456/articles/9497584.html	
			介绍：
				1.慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句。
					具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。
					long_query_time的默认值为10，意思是运行10S以上的语句。
				2.默认情况下，Mysql数据库并不启动慢查询日志，需要我们手动来设置这个参数。
				3.慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。
			注：
				如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。
				1.开启慢查询日志
					查看是否开启：show variables like '%slow_query_log%';
					开启慢查询日志：set global slow_query_log=1;（重启后失效）；
				2.设置慢查询日志
					设置阀值时长命令：set global long_query_time=3   （修改为阀值到3秒钟的就是慢sql）（500ms）
		5.中继日志(relay log)：主从复制时使用的日志。
		6.事务日志(redo log和undo log) ：innodb事务日志。

