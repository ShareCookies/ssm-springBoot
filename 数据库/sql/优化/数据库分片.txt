数据库扩展阶段：
	https://blog.csdn.net/iteye_8053/article/details/81932671?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control
	1、读写分离：当数据库访问量还不是很大的时候，我们可以适当增加服务器，数据库主从复制的方式将读写分离；

	2、垂直分区：当写入操作一旦增加的时候，那么主从数据库将花更多的时间的放在数据同步上，这个时候服务器也是不堪重负的；那么就有了数据的垂直分区，数据的垂直分区思路是将写入操作比较频繁的数据表，如用户表_user,或者订单表_orders,那么我们就可以把这个两个表分离出来，放在不同的服务器，如果这两个表和其他表存在联表查询，那么就只能把原来的sql语句给拆分了，先查询一个表，在查询另一个，虽然说这个会消耗更过性能，但比起那种大量数据同步，负担还是减轻了不少；
	3、水平分区：但是往往事情不尽人意，可能采取垂直分区能撑一段时间，由于网站太火了，访问量又每日100w,一下子蹦到了1000w,这个时候可以采取数据的进行分离，我们可以根据user的Id不同进行分配，如采取%2的形式，或者%10的形式，当然这种形式对以后的扩展有了很大的限制，当我由10个分区增加到20个的时候，所有的数据都得重新分区，那么将是一个的很庞大的计算量；以下提供几种常见的算法：
	哈希算法：就是采用user_id%的方式;
	范围：可以根据user_id字符值范围分区，如1-1000为一区，1001-2000则是另一个区等；
	映射关系：就是将user_id存在的所对应的分区放在数据库中保存，当用户操作时先去查询所在分区，再进行操作；

	对于以上几种扩展方式，读写分离主要是操作上的扩展，垂直分区主要是对写入较频繁数据表的分离，水平分区主要是数据分离；

数据库分片：
	数据库分片分为两种类型，垂直分区和水平分区.

	3.垂直分区
		根据数据库里面数据表的相关性进行拆分。 例：用户表中既有用户的登录信息又有用户的基本信息，可以将用户表拆分成两个单独的表，甚至放到单独的库做分库。
		总结：
			垂直拆分是指数据表列的拆分，把一张列比较多的表拆分为多张表。
			垂直拆分优缺点：
				优点： 
					可以使得列数据变小，在查询时减少读取的Block数，减少I/O次数。
					此外，垂直分区可以简化表的结构，易于维护。
				缺点： 
					主键会出现冗余，需要管理冗余列，
					并会引起Join操作，可以通过在应用层进行Join来解决。（数据合并操作）
					此外，垂直分区会让事务变得更加复杂；
	4. 水平分区
		保持数据表结构不变，通过某种策略存储数据分片。
		这样每一片数据分散到不同的表或者库中，达到了分布式的目的。 

		总结：
			水平拆分就是指数据表行的拆分。
			优缺点：
				优点：水平拆分能够 支持非常大的数据量存储，应用端改造也少
				缺点：但 分片事务难以解决 ，跨节点Join性能较差，逻辑复杂
		例：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。			
		附：
			1.表的行数超过200万行时，就会变慢。
			2.水平拆分可以支持非常大的数据量。
			3.分表仅仅是解决了单一表数据过大的问题，但由于表的数据还是在同一台机器上，其实对于提升MySQL并发能力没有什么意义，所以 水平拆分最好分库 。
			4.分库分表之后,全局 id 主键的处理：
				UUID：（Universally Unique Identifier通用唯一识别码）
					不适合作为主键，因为太长了，并且无序不可读，查询效率低。
					比较适合用于生成唯一的名字的标示比如文件的名字。
					什么是 UUID：https://www.jianshu.com/p/da6dae36c290	
				数据库自增 id :
					两台数据库分别设置不同步长，生成不重复ID的策略来实现高可用。
					这种方式生成的 id 有序，但是需要独立部署数据库实例，成本高，还会有性能瓶颈。
				利用 redis 生成 id :
					性能比较好，灵活方便，不依赖于数据库。
					但是，引入了新的组件造成系统更加复杂，可用性降低，编码更加复杂，增加了系统成本。
				Twitter的snowflake算法 ：
					Github 地址：https://github.com/twitter-archive/snowflake。
				美团的Leaf分布式ID生成系统 ：
					https://tech.meituan.com/2017/04/21/mt-leaf.html 。
					Leaf 是美团开源的分布式ID生成器，能保证全局唯一性、趋势递增、单调递增、信息安全。

	数据库分片的两种常见方案：
		
		客户端代理：
			分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。
			当当网的 Sharding-JDBC ???、阿里的TDDL是两种比较常用的实现。
		中间件代理：
			在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。 
			我们现在谈的 Mycat 、360的Atlas、网易的DDB等等都是这种架构的实现。
		附：
			Sharding-JDBC、Mycat、drds：
				http://www.cicoding.cn/sharding-jdbc/sharding-jdbc002/	
				PhxSQL，Atlas，kingshard：
					https://aikbuk.com/2019/10/08/mysql%E4%B8%AD%E9%97%B4%E4%BB%B6/
				Apache ShardingSphere
					https://shardingsphere.apache.org/
					https://shardingsphere.apache.org/document/current/cn/quick-start/sharding-jdbc-quick-start/
			mycat和sharding-jdbc哪个比较好：
				https://www.zhihu.com/question/64709787
			MySQL 集群方案	
				https://blog.csdn.net/demonson/article/details/80576787
				随着官方MySQL Group Replication的GA，使用分布式协议来解决数据一致性问题已经成为了主流的方向。期望越来越多优秀的解决方案被提出，MySQL高可用问题可以被更好的解决。
					https://blog.csdn.net/chaozhi_guo/article/details/66972749
				
	总结：
		尽量不要对数据进行分片，因为拆分会带来逻辑、部署、运维的各种复杂度 。
		一般的数据表在优化得当的情况下支撑千万以下的数据量是没有太大问题的。
		如果实在要分片，尽量选择客户端分片架构，这样可以减少一次和中间件的网络I/O。