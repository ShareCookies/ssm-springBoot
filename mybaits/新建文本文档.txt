从 XML 中构建 SqlSessionFactory：
	每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。
	SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。
	而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。
	
	例：
		//1.读取resources下面的mybatis-config.xml文件
		String resource = "org/mybatis/example/mybatis-config.xml";
		InputStream inputStream = Resources.getResourceAsStream(resource);
		//2.使用SqlSessionFactoryBuilder创建SqlSessionFactory
		SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
		//3.通过sqlSessionFactory创建SqlSession
		SqlSession sqlSession = sqlSessionFactory.openSession();
源码分析：
	Mybatis源码也是对Jbdc的再一次封装,不管怎么进行包装,还是会有获取链接、preparedStatement、封装参数、执行这些步骤的。
	


创建SqlSessionFactory：
	通过SqlSessionFactoryBuilder的build方法创建SqlSessionFactory
	//SqlSessionFactoryBuilder是一个建造者模式？
	public SqlSessionFactory build(InputStream inputStream) {
		return build(inputStream, null, null);
	}
	
	public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
		try {
			XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
			//其中parser.parse()负责解析配置文件xml，并生成返回Configuration对象。
			//build(configuration)创建SqlSessionFactory
			return build(parser.parse());
		} catch (Exception e) {
			throw ExceptionFactory.wrapException("Error building SqlSession.", e);
		} finally {
			ErrorContext.instance().reset();
			try {
				inputStream.close();
			} catch (IOException e) {
				// Intentionally ignore. Prefer previous error.
			}
		}
	}
	//初始化Configuration
	//XMLConfigBuilder也是建造者模式
	public XMLConfigBuilder(InputStream inputStream, String environment, Properties props) {
		this(new XPathParser(inputStream, true, props, new XMLMapperEntityResolver()), environment, props);
	}
	private XMLConfigBuilder(XPathParser parser, String environment, Properties props) {
		super(new Configuration());
		ErrorContext.instance().resource("SQL Mapper Configuration");
		this.configuration.setVariables(props);
		this.parsed = false;
		this.environment = environment;
		this.parser = parser;
	}


	parser.parse()解析xml
		通过解析configuration.xml文件,获取其中的Environment、Setting,
		重要的是将下的所有解析出来之后添加到Configuration,Configuration类似于配置中心,所有的配置信息都在这里。
		public Configuration parse() {
			//判断是否重复解析
			if (parsed) {
				throw new BuilderException("Each XMLConfigBuilder can only be used once.");
			} 
			parsed = true;
			//读取配置文件一级节点configuration
			parseConfiguration(parser.evalNode("/configuration"));
			return configuration;
		}
		//parseConfiguration完成的是解析configuration下的标签
		private void parseConfiguration(XNode root) {
			try {
				//properties 标签,用来配置参数信息，比如最常见的数据库连接信息
				propertiesElement(root.evalNode("properties"));
				Properties settings = settingsAsProperties(root.evalNode("settings"));
				loadCustomVfs(settings);
				loadCustomLogImpl(settings);
				//实体别名两种方式:1.指定单个实体;2.指定包
				typeAliasesElement(root.evalNode("typeAliases"));
				//插件
				pluginElement(root.evalNode("plugins"));
				//用来创建对象(数据库数据映射成java对象时)
				objectFactoryElement(root.evalNode("objectFactory"));
				objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
				reflectorFactoryElement(root.evalNode("reflectorFactory"));
				settingsElement(settings);
				// read it after objectFactory and objectWrapperFactory issue #631
				//数据库环境
				environmentsElement(root.evalNode("environments"));
				databaseIdProviderElement(root.evalNode("databaseIdProvider"));
				//数据库类型和Java数据类型的转换
				typeHandlerElement(root.evalNode("typeHandlers"));
				//这个是对数据库增删改查的解析
				mapperElement(root.evalNode("mappers"));
			} catch (Exception e) {
				throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
			}
		}
		private void mapperElement(XNode parent) throws Exception {
			if (parent != null) {
					for (XNode child : parent.getChildren()) {
					//解析<package name=""/>
					if ("package".equals(child.getName())) {
						String mapperPackage = child.getStringAttribute("name");
						//包路径存到mapperRegistry中
						configuration.addMappers(mapperPackage);
					} else {
						//解析<mapper url="" class="" resource=""></mapper>
						String resource = child.getStringAttribute("resource");
						String url = child.getStringAttribute("url");
						String mapperClass = child.getStringAttribute("class");
						if (resource != null && url == null && mapperClass == null) {
							ErrorContext.instance().resource(resource);
							//读取Mapper.xml文件
							InputStream inputStream = Resources.getResourceAsStream(resource);
							XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream,
							configuration, resource, configuration.getSqlFragments());
							mapperParser.parse();
						} else if (resource == null && url != null && mapperClass == null) {
							ErrorContext.instance().resource(url);
							InputStream inputStream = Resources.getUrlAsStream(url);
							XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream,
							configuration, url, configuration.getSqlFragments());
							mapperParser.parse();
						} else if (resource == null && url == null && mapperClass != null) {
							Class<?> mapperInterface = Resources.classForName(mapperClass);
							configuration.addMapper(mapperInterface);
						} else {
							throw new BuilderException("A mapper element may only specify a url, resource or class, but not more than one.");
						}
					}
				}
			}
		}
构建 SqlSessionFactory
	从 XML 中构建 SqlSessionFactory：
		...
		environment 元素体中包含了事务管理和连接池的配置。
		mappers 元素则包含了一组映射器（mapper），这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。
从 SqlSessionFactory 中获取 SqlSession
	SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。
	你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。
	例：
		try (SqlSession session = sqlSessionFactory.openSession()) {
		  Blog blog = (Blog) session.selectOne("org.mybatis.example.BlogMapper.selectBlog", 101);
		}
探究已映射的 SQL 语句
	现在你可能很想知道 SqlSession 和 Mapper 到底具体执行了些什么操作。

	一个语句既可以通过 XML 定义，也可以通过注解定义。
		事实上 MyBatis 提供的所有特性都可以利用基于 XML 的映射语言来实现
	
	基于 XML 映射语句:
		这里给出一个基于 XML 映射语句的示例，它应该可以满足上个示例中 SqlSession 的调用。

		<?xml version="1.0" encoding="UTF-8" ?>
		<!DOCTYPE mapper
		  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		<mapper namespace="org.mybatis.example.BlogMapper">
		  <select id="selectBlog" resultType="Blog">
			select * from Blog where id = #{id}
		  </select>
		</mapper>
		它在命名空间 “org.mybatis.example.BlogMapper” 中定义了一个名为 “selectBlog” 的映射语句，这样你就可以用全限定名 “org.mybatis.example.BlogMapper.selectBlog” 来调用映射语句了
		就像上面例子中那样：
		Blog blog = (Blog) session.selectOne("org.mybatis.example.BlogMapper.selectBlog", 101);

		你可能会注意到，这种方式和用全限定名调用 Java 对象的方法类似。
		这样，该命名就可以直接映射到在命名空间中同名的映射器类，并将已映射的 select 语句匹配到对应名称、参数和返回类型的方法。
		因此你就可以像上面那样，不费吹灰之力地在对应的映射器接口调用方法，就像下面这样：
		BlogMapper mapper = session.getMapper(BlogMapper.class);
		Blog blog = mapper.selectBlog(101);
	附：
		对命名空间的一点补充：

			在之前版本的 MyBatis 中，命名空间（Namespaces）的作用并不大，是可选的。 但现在，随着命名空间越发重要，你必须指定命名空间。

			命名空间的作用有两个，
				一个是利用更长的全限定名来将不同的语句隔离开来，
				同时也实现了你上面见到的接口绑定。
				就算你觉得暂时用不到接口绑定，你也应该遵循这里的规定，以防哪天你改变了主意。 
				长远来看，只要将命名空间置于合适的 Java 包命名空间之中，你的代码会变得更加整洁，也有利于你更方便地使用 MyBatis。

			命名解析：
				为了减少输入量，MyBatis 对所有具有名称的配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则。

				全限定名
					（比如 “com.mypackage.MyMapper.selectAllThings）将被直接用于查找及使用。
				短名称
					（比如 “selectAllThings”）如果全局唯一也可以作为一个单独的引用。 如果不唯一，有两个或两个以上的相同名称（比如 “com.foo.selectAllThings” 和 “com.bar.selectAllThings”），那么使用时就会产生“短名称不唯一”的错误，这种情况下就必须使用全限定名。

	基于 注解 映射语句:
		对于像 BlogMapper 这样的映射器类来说，还有另一种方法来完成语句映射。 它们映射的语句可以不用 XML 来配置，而可以使用 Java 注解来配置。
		例：
			比如，上面的 XML 示例可以被替换成如下的配置：
			package org.mybatis.example;
			public interface BlogMapper {
			  @Select("SELECT * FROM blog WHERE id = #{id}")
			  Blog selectBlog(int id);
			}
作用域（Scope）和生命周期
	理解我们之前讨论过的不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。
	附：
		对象生命周期和依赖注入框架
			依赖注入框架可以创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。
			附：
				如果对如何通过依赖注入框架使用 MyBatis 感兴趣，可以研究一下 MyBatis-Spring 或 MyBatis-Guice 两个子项目。
	SqlSessionFactoryBuilder
		这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。
		因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。
		你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。
	SqlSessionFactory
		SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 
		使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。
		因此 SqlSessionFactory 的最佳作用域是应用作用域。 
		有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。
	SqlSession
		每个线程都应该有它自己的 SqlSession 实例。
		SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。
			!
				方法作用域对象是安全的，因为从任意地方进入这个方法，方法作用域对象都是被新创建的。
		绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 
		如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。 
映射器实例
	映射器是一些绑定映射语句的接口。
	映射器接口的实例是从 SqlSession 中获得的。
	最好将映射器放在方法作用域内。
		虽然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。 也就是说，映射器实例应该在调用它们的方法中被获取，使用完毕之后即可丢弃。 
	附：
		映射器实例并不需要被显式地关闭。
	例：
		try (SqlSession session = sqlSessionFactory.openSession()) {
		  BlogMapper mapper = session.getMapper(BlogMapper.class);
		  // 你的应用逻辑代码
		}		