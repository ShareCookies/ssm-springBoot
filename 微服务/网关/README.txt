介绍：
	API Gateway（api 网关）：
		微服务中，各服务是通过注册中心来进行互相的访问，那外部的应用如何来访问内部各种各样的微服务呢。
		微服务架构中，后端各服务往往不直接开放给调用端，而是通过一个API网关根据请求的url，路由到相应的服务。
			当添加API网关后，在第三方调用端和服务提供方之间就创建了一面墙，这面墙直接与调用方通信进行权限控制，后将请求均衡分发给后台服务端。
	网关的两种实现：
		Spring Cloud Zuul：
			Zuul由Netflix开源的网关组件，提供了负载均衡、反向代理、权限认证等功能。
			./SpringCloudZuul/README.txt
		Spring Cloud Gateway：
			Spring Cloud的一个全新的网关组件，目的是为了替换掉Zuul1。
			./SpringCloudGateWay/README.txt
		两网关对比：
			Zuul（1.x） 基于 Servlet，使用阻塞 API，它不支持任何长连接，如 WebSockets，
			Spring Cloud Gateway 使用非阻塞 API，支持 WebSockets，支持限流等新特性。
	附：
		为什么需要API Gateway
			1、简化客户端调用复杂度
				在微服务架构模式下后端服务的实例数一般是动态的，对于客户端而言很难发现动态改变的服务实例的访问地址信息。
				因此在基于微服务的项目中为了简化前端的调用逻辑，通常会引入API Gateway作为轻量级网关，
				同时API Gateway中也会实现相关的认证逻辑从而简化内部服务之间相互调用的复杂度。

			2、数据裁剪以及聚合
				通常而言不同的客户端显示时对于数据的需求是不一致的，比如手机端或者Web端又或者在低延迟的网络环境或者高延迟的网络环境。
				因此为了优化客户端的使用体验，API Gateway可以对通用性的响应数据进行裁剪以适应不同客户端的使用需求。
				同时还可以将多个API调用逻辑进行聚合，从而减少客户端的请求数，优化客户端用户体验
			3、多渠道支持?
				当然我们还可以针对不同的渠道和客户端提供不同的API Gateway.
				对于该模式的使用由另外一个大家熟知的方式叫Backend for front-end,在该模式当中，我们可以针对不同的客户端分别创建其BFF，
				进一步了解BFF可以参考这篇文章：https://samnewman.io/patterns/architectural/bff/

			4、遗留系统的微服务化改造

				对于系统而言进行微服务改造通常是由于原有的系统存在或多或少的问题。
					比如技术债务，代码质量，可维护性，可扩展性等等。
				API Gateway的模式同样适用于这一类遗留系统的改造，
				通过微服务化的逐步改造，对原有系统中的问题进行修复，从而提升原有业务响应力。	