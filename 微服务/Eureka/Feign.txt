Feign
	介绍：
		一个声明式WebService调用客户端。
		且其已经集成了Ribbon， Hystrix。
			Feign其实是一个声明式WebService调用客户端，其和远程服务通信实现使用的是http。 
			Feign 你可以将其当作是一个使用起来更加方便的 HTTP 客户端。
		即：
			创建一个接口，然后在上面添加对应注解即可，将需要调用的远程服务的方法定义成抽象方法即可。
			用户无需自己构建http请求，就像是调用自身工程的方法，而感觉不到是调用远程方法，使得编写客户端变得非常容易。
		注：？Feign与Ribbon
			Feign 在 Ribbon的基础上进行了一次改进。
	例：feign的简易使用
		./Eureka使用.txt > springCloud eureka 客户端的使用 > 服务调用
	附：
	Feign与Ribbon：(负载均衡)
		Feign与Ribbon组合(+EurekaClient)以支持负载均衡。
		？
			eureka提供服务地址、ribbon提供负载算法、feign提供http吗
		详：
			goto: Ribbon
	Feign与Hystrix：(熔断)
		Feign与Hystrix组合以支持熔断功能。
		详：
			goto: Hystrix
	附:	
	？
		Feign也支 持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装,使其支持了Spring MVC标准注解和HttpMessageConverters。
	
	？原理：
		核心思路：
		源码：
附：	
Ribbon
	介绍：
		1. ribbon提供了客户端负载均衡调用服务功能。
		2. Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端http负载均衡的工具。

		附：
			Ribbon客户端组件还提供一系列完善的配置项：
				如连接超时，重试等。
			？
				使用Ribbon+RestTemplate也能实现负载均衡吗
			Zuul + Ribbon 脱离Eureka完成负载均衡+重试机制
				https://www.cnblogs.com/deepSleeping/p/11777768.html
	使用：
		与feign是已经默认集成并启用了吧？
Hystrix：熔断器
	介绍：
		熔断器是保护服务高可用的最后一道防线，能够实现快速失败。
			快速失败：
				在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器。
				从而防止应用程序不断地尝试执行可能会失败的操作。使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。
	特性：
		1.断路器机制（CircuitBreaker）：
			1. 介绍：
				当Hystrix Command请求后端服务失败数量超过一定比例(默认50%), 断路器会切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务.
			2. 断路器具有自我检测并恢复的能力：
				断路器保持在开路状态一段时间后(默认5秒), 自动切换到半开路状态(HALF-OPEN).
				这时会判断下一次请求的返回情况, 如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). 	
		2.Fallback：
			介绍：
				Fallback相当于是降级操作.
				对于查询操作, 我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值.
					fallback方法的返回值一般是设置的默认值或者来自缓存.
			例：
				./Hystrix熔断器使用.txt
		3.资源隔离：
			介绍：
				Hystrix主要通过线程池来实现资源隔离. 
				通常在使用的时候我们会根据调用的远程服务划分出多个线程池. 
					例：
						调用产品服务的Command放入A线程池, 调用账户服务的Command放入B线程池. 
				这样做的主要优点是运行环境被隔离开了. 
					这样就算调用服务的代码存在bug或者由于其他原因导致自己所在线程池被耗尽时, 不会对系统的其他服务造成影响. 但是带来的代价就是维护多个线程池会对系统带来额外的性能开销. 如果是对性能有严格要求而且确信自己调用服务的客户端代码不会出问题的话, 可以使用Hystrix的信号模式(Semaphores)来隔离资源.
			例：
				?
	Hystrix熔断器使用：
		./Hystrix熔断器使用.txt
	附：
		雪崩效应
			在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。
			
			雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。
