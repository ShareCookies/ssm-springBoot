Eureka介绍：
	前景：
		当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动更改属性可能会产生问题。 
		Eureka服务注册和发现可以在这种情况下提供帮助。由于所有服务都在Eureka服务器上注册并通过调用Eureka服务器完成查找，因此无需处理服务地点的任何更改和处理。
	介绍：
		Eureka是Netflix开源的一款提供服务注册和发现的产品，它提供了完整的Service Registry和Service Discovery实现。
		是springcloud体系中最重要最核心的组件之一。
	附：
		服务中心作用：(服务的注册、发现)
			有了服务中心之后，项目A调用项目B任何一个服务都不能直接去掉用，都需要通过服务中心来调用。
			通过服务中心来获取服务你不需要关注你调用的项目IP地址，由几台服务器组成，每次直接去服务中心获取可以使用的服务去调用既可。

		服务中心提供的其他高级功能：
			比如几台服务提供相同服务来做均衡负载；(负载)
				？这应该是客户端来做具体的负载均衡吧，注册中心应该只负责保存服务的负载地址吧
			监控服务器调用成功率来做熔断，移除服务列表中的故障点；(熔断)
				心跳？
			监控服务调用时间来对不同的服务器设置不同的权重等等。(降级)
				？降级
Eureka的基本架构：
	./Eureka的基本架构.png
	1.Eureka Server 服务中心
		提供服务注册和发现
		例：
			./Eureka使用.txt > springCloud eureka 服务端的使用
	2、Service Provider 服务提供方
		将自身服务注册到Eureka，从而使服务消费方能够找到。
		例：
			./Eureka使用.txt > springCloud eureka 客户端的使用 > 服务提供

	3、Service Consumer 服务消费方
		从Eureka获取注册服务列表，从而能够消费服务。
		例：
			./Eureka使用.txt > springCloud eureka 客户端的使用 > 服务调用
		
	总结：
		Eureka是由两个部分组成的，分别为Eureka服务器和Eureka客户端。
		eureka服务器用作服务注册中心。
		eureka客户端就是一个java客户端，能够将自身应用当做服务，注册到服务中心和从服务中心获取可用服务，简化各服务之间交互。
eureka原理：
	./eureka原理.txt
			
