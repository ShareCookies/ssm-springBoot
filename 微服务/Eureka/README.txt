Eureka介绍：
	Eureka是Netflix开源的一款提供服务注册和发现的产品，它提供了完整的Service Registry和Service Discovery实现。
	提供各种服务功能，包括服务的注册、发现、熔断、负载、降级等
	也是springcloud体系中最重要最核心的组件之一。
	附：
		服务中心作用：
			有了服务中心之后，项目A调用项目B任何一个服务都不能直接去掉用，都需要通过服务中心来调用。
			通过服务中心来获取服务你不需要关注你调用的项目IP地址，由几台服务器组成，每次直接去服务中心获取可以使用的服务去调用既可。

		服务中心提供的高级功能：
			比如几台服务提供相同服务来做均衡负载；
			监控服务器调用成功率来做熔断，移除服务列表中的故障点；
			监控服务调用时间来对不同的服务器设置不同的权重等等。
Eureka的基本架构：
	./Eureka的基本架构.png
	1.Eureka Server 服务中心
		提供服务注册和发现
		例：
			./Eureka使用.txt > springCloud eureka 服务端的使用
	2、Service Provider 服务提供方
		将自身服务注册到Eureka，从而使服务消费方能够找到。
		例：
			./Eureka使用.txt > springCloud eureka 客户端的使用 > 服务提供
		注：
			负载均衡:
				服务提供方注册到服务中心的项目名一样，Eureka Server就会自动实现负载均衡功能。
					请求会自动轮询到每个服务端来处理。
				Ribbon？？？
				附：
					负载均衡作用：	
						因为一个服务器的承载量是有限的，所以同一个服务会部署在多个服务器上，通过负载均衡来减轻各个服务器上的压力。
							每个服务器上的服务都会去注册中心注册服务，他们会有相同的服务名称但有不同的实例id，所以拉取的是服务列表。
			心跳：
				服务提供者向注册中心注册服务，并每隔30秒发送一次心跳，如果Eureka在90秒后还未收到服务提供者发来的心跳时，那么它就会认定该服务已经死亡就会注销这个服务。
				附：
					1.注销并不是立即注销，而是会在60秒以后对在这个之间段内“死亡”的服务集中注销，如果立即注销，势必会对Eureka造成极大的负担。这些时间参数都可以配置。
					2.Eureka还有自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，所以不会再接收心跳，也不会删除服务。
		
			
				
	3、Service Consumer 服务消费方
		从Eureka获取注册服务列表，从而能够消费服务。
		例：
			./Eureka使用.txt > springCloud eureka 客户端的使用 > 服务调用
		
	附：
		所以Eureka是由两个组件组成的，分别为Eureka服务器和Eureka客户端。
			服务器用作服务注册中心。
			客户端是一个java客户端简化了与服务器的交互，能够将自身应用当做服务，注册到服务中心和从服务中心获取可用服务。
				
		
		
		
		
		
		