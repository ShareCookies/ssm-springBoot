熔断器介绍（Hystrix）：
	熔断器是保护服务高可用的最后一道防线，能够实现快速失败。
	其原理类似电力过载保护器。
		附：
		快速失败：
			在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器。
			从而防止应用程序不断地尝试执行可能会失败的操作。使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。
	附：
		雪崩效应
			在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。
				雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。
Hystrix具有的特性：
	1.断路器机制（CircuitBreaker）：
		当Hystrix Command请求后端服务失败数量超过一定比例(默认50%), 断路器会切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务.
		断路器保持在开路状态一段时间后(默认5秒), 自动切换到半开路状态(HALF-OPEN).
		这时会判断下一次请求的返回情况, 如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). 	
		注：
			断路器具有自我检测并恢复的能力.
	2.Fallback：
		介绍：
			Fallback相当于是降级操作.
			对于查询操作, 我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值.
				fallback方法的返回值一般是设置的默认值或者来自缓存.
	3.资源隔离：
		在Hystrix中主要通过线程池来实现资源隔离. 
		通常在使用的时候我们会根据调用的远程服务划分出多个线程池. 
			例：
				调用产品服务的Command放入A线程池, 调用账户服务的Command放入B线程池. 
		这样做的主要优点是运行环境被隔离开了. 
			这样就算调用服务的代码存在bug或者由于其他原因导致自己所在线程池被耗尽时, 不会对系统的其他服务造成影响. 但是带来的代价就是维护多个线程池会对系统带来额外的性能开销. 如果是对性能有严格要求而且确信自己调用服务的客户端代码不会出问题的话, 可以使用Hystrix的信号模式(Semaphores)来隔离资源.
Hystrix的使用：
	熔断只是作用在服务调用这一端。
	依赖：
		Feign已经依赖了Hystrix所以在maven配置上不用做任何改动
	配置：
		feign.hystrix.enabled=true
	添加Fallback：
		2、创建Fallback回调类
			继承与HelloRemote实现回调的方法
			@Component
			public class HelloRemoteHystrix implements HelloRemote{
				@Override
				public String hello(@RequestParam(value = "name") String name) {
					return "hello" +name+", this messge send failed ";
				}
			}
		3.添加fallback属性，指向fallback回调类
		@FeignClient(name= "spring-cloud-producer",fallback = HelloRemoteHystrix.class)
		public interface HelloRemote {
			@RequestMapping(value = "/hello")
			public String hello(@RequestParam(value = "name") String name);
		}
	测试
		1.正常访问。2.关掉服务提供者访问。
Hystrix-dashboard熔断监控：
	Hystrix-dashboard是一款针对Hystrix进行实时监控的工具。
	通过Hystrix Dashboard我们可以在直观地看到各Hystrix Command的请求响应时间, 请求成功率等数据。
	
	Turbine：
		Turbine工具能让我们汇总系统内多个服务的数据并显示到Hystrix Dashboard上



3.熔断只是作用在服务调用这一端？所以eureka本身是没有熔断功能的？		
