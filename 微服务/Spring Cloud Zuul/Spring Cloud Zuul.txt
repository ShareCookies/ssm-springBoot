介绍：
	API Gateway（api 网关）：
		在微服务架构中，后端服务往往不直接开放给调用端，而是API网关根据请求的url，路由到相应的服务。
			当添加API网关后，在第三方调用端和服务提供方之间就创建了一面墙，这面墙负责与调用方进行通信。
			hcg：
				api网关负责与第三方调用端通信。
				还可提供权限控制，负载均衡等功能。
		Spring Cloud Zuul：
			Zuul由Netflix开源的网关组件（API gateway），提供了负载均衡、反向代理、权限认证等功能。
		Spring Cloud Gateway：
			是Spring Cloud的一个全新的API网关项目，目的是为了替换掉Zuul1。
	为什么需要API Gateway
		1、简化客户端调用复杂度
			在微服务架构模式下后端服务的实例数一般是动态的，对于客户端而言很难发现动态改变的服务实例的访问地址信息。
			因此在基于微服务的项目中为了简化前端的调用逻辑，通常会引入API Gateway作为轻量级网关，
			同时API Gateway中也会实现相关的认证逻辑从而简化内部服务之间相互调用的复杂度。

		2、数据裁剪以及聚合
			通常而言不同的客户端显示时对于数据的需求是不一致的，比如手机端或者Web端又或者在低延迟的网络环境或者高延迟的网络环境。
			因此为了优化客户端的使用体验，API Gateway可以对通用性的响应数据进行裁剪以适应不同客户端的使用需求。
			同时还可以将多个API调用逻辑进行聚合，从而减少客户端的请求数，优化客户端用户体验
		3、多渠道支持?
			当然我们还可以针对不同的渠道和客户端提供不同的API Gateway.
			对于该模式的使用由另外一个大家熟知的方式叫Backend for front-end,在该模式当中，我们可以针对不同的客户端分别创建其BFF，
			进一步了解BFF可以参考这篇文章：https://samnewman.io/patterns/architectural/bff/

		4、遗留系统的微服务化改造

			对于系统而言进行微服务改造通常是由于原有的系统存在或多或少的问题。
				比如技术债务，代码质量，可维护性，可扩展性等等。
			API Gateway的模式同样适用于这一类遗留系统的改造，
			通过微服务化的逐步改造，对原有系统中的问题进行修复，从而提升原有业务响应力。



Spring Cloud Zuul 微服务化使用：
	url映射的方式来实现zull的转发局限性很大。
		比如每增加一个服务就需要配置一条内容，另外后端的服务如果是动态来提供，就不能采用这种方案来配置了。
	微服务架构中，服务名与服务实例地址的关系在eureka server中已经存在了，
	所以只需要将Zuul注册到eureka server上，去发现其他服务就可以实现对serviceId的映射。
	1、添加依赖
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zuul</artifactId>
		</dependency>
	2、配置文件：
		spring.application.name=gateway-service-zuul
		server.port=8888
		# 所有访问http://localhost:8888/producer/**的地址，都会转发到spring-cloud-producer
		zuul.routes.api-a.path=/producer/**
		zuul.routes.api-a.serviceId=spring-cloud-producer

		eureka.client.serviceUrl.defaultZone=http://localhost:8000/eureka/
		注：
			网关的默认路由规则：
				spring cloud zuul已经帮我们做了默认配置。
				默认情况下，Zuul会代理所有注册到Eureka Server的微服务，
				并且Zuul的路由规则如下：
				http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务。
				例：
					http://localhost:8888/spring-cloud-producer/hello?name=test
					会被转发到spring-cloud-producer微服务。
	3、测试
		启动项目，访问：http://localhost:8888/producer/hello?name=test，返回：hello test，this is first messge。
		说明访问gateway-service-zuul-eureka的请求自动转发到了spring-cloud-producer，并且将结果返回。
	？
		2.producer服务多个，zuul成功调用了producer服务并且做了均衡负载。
		谁做的负载了，eureka还是zuul？
附：
	Spring Cloud Zuul简单使用：
		1、添加依赖
		引入spring-cloud-starter-zuul包
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zuul</artifactId>
		</dependency>
		
		2、配置文件

		spring.application.name=gateway-service-zuul
		server.port=8888

		#这里的配置表示，访问/it/** 直接重定向到http://www.ityouknow.com/**
		zuul.routes.baidu.path=/it/**
		zuul.routes.baidu.url=http://www.ityouknow.com/
		3、启动类添加@EnableZuulProxy，支持网关路由。

		@SpringBootApplication
		@EnableZuulProxy
		public class GatewayServiceZuulApplication {
			...
		}
		4、测试
			启动gateway-service-zuul-simple项目，在浏览器中访问：http://localhost:8888/it/spring-cloud，
			看到页面返回了：http://www.ityouknow.com/spring-cloud 页面的信息.
