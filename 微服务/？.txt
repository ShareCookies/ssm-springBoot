Dubbo：
	Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个高性能优秀的服务框架
2.spring security整合
	3.Spring Security和OAuth2，token
		https://www.jdon.com/dl/best/securing-rest-services-with-spring.html.html

zk，cdn，nginx，springcloud zuul

zookeeper注册中心：
	Eureka和Zookeeper的区别:
		https://www.cnblogs.com/pickKnow/p/11384441.html
		CPA理论:
			分布式系统领域有个著名的 CAP定理.
			一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。
			由于分区容错性在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡。
			Consistency:(一致性)
				数据一致更新，所有数据变动都是同步的.
				即当一个Process（过程）修改了某个数据后，其他Process读取数据得到的是更新后的数据，但并不是所有系统都 可以做到这一点。
				例如，在一些并非严格要求一致性的系统中，后来的Process得到的数据可能还是修改之前的数据，或者需要等待一定时间后才能得到修改 之后的数据，这被成为“弱一致性”.
				最经典的应用就是DNS系统。当用户修改了DNS配置后，往往不会马上在全网更新，必定会有一个延迟，这个延迟被称为 “不一致窗口”，它的长度取决于系统的负载、冗余的个数等因素。
				但对于某些系统而言，一旦写入，后面读取的一定是修改后的数据，如银行账户信息，这被称为 “强一致性”。
			Availability:(可用性)
				好的响应性能.
				即系统总是能够为用户提供连续的服务能力。当用户发出请求是，系统能给出响应（成功或者失败），而且是立即给出响应.而不是等待其他事情完成才响应,如果需要等待某件事情完成才响应，那么“可用性”就不存在了。
			Partition tolerance:(分区容忍性)
				可靠性			
				任何一个分布式计算系统都是由多个节点组成的。在正常情况下，节点与节点之间的通信是正常的。但是在某些情况下，节点之间的通信会 断开，这种断开成为“Partition”。
				在分布式计算的实现中，Partition是很常见的，因为节点不可能永远不出故障，尤其是对于跨物理地区的 海量存储系统而言，而容错性则可以保证如果只是系统中的部分节点不可用，那么相关的操作仍旧能够正常完成。

Zookeeper是保证CP
	当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。
	
	zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。
	在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。
	
	

Eureka是保证AP
	Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：
	1. Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务
	2. Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)
	3. 当网络稳定时，当前实例新的注册信息会被同步到其它节点中

因此， Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。


