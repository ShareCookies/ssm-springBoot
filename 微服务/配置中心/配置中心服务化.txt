痛点：
	前头客户端都是直接调用配置中心的server端来获取配置文件信息。
	如果server端要做集群，客户端只能通过原始的方式来路由，server端改变IP地址的时候，客户端也需要修改配置，


server端
	springcloud提供的解决方案是,将server端当做一个服务注册到eureka中，client端去eureka中去获取配置中心server端的服务既可。
	1、添加依赖
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>
		<!-- 引入spring-cloud-starter-eureka包，来添加对eureka的支持。 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
	2.配置文件
		增加了eureka注册中心的配置

		server:
		  port: 8001
		spring:
		  application:
			name: spring-cloud-config-server
		  cloud:
			config:
			  server:
				git:
				  uri: https://github.com/ityouknow/spring-cloud-starter/     # 配置git仓库的地址
				  search-paths: config-repo                             # git仓库地址下的相对地址，可以配置多个，用,分割。
				  username: username                                        # git仓库的账号
				  password: password                                    # git仓库的密码
		eureka:
		  client:
			serviceUrl:
			  defaultZone: http://localhost:8000/eureka/   ## 注册中心eurka地址
	3.启动类
		启动类添加@EnableDiscoveryClient激活对注册中心的支持

		@EnableDiscoveryClient
		@EnableConfigServer
		@SpringBootApplication
		public class ConfigServerApplication {
			...
		}
		
客户端改造
	1、添加依赖
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
	2、配置文件
		application.properties
			spring.application.name=spring-cloud-config-client
			server.port=8002
			

		bootstrap.properties：
			spring.cloud.config.name=neo-config
			spring.cloud.config.profile=dev
			spring.cloud.config.label=master
			spring.cloud.config.discovery.enabled=true #开启Config服务发现支持
			spring.cloud.config.discovery.serviceId=spring-cloud-config-server	#指定server端的name,也就是server端spring.application.name的值
			eureka.client.serviceUrl.defaultZone=http://localhost:8000/eureka/ #指向注册中心的地址

			主要是去掉了spring.cloud.config.uri直接指向server端地址的配置，增加了最后三个配置。

	3、启动类
		@EnableDiscoveryClient
		@SpringBootApplication
		public class ConfigClientApplication {
			...
		}
高可用：
	就是配置中心服务化，然后多注册几台即可。