
https://mp.weixin.qq.com/s?__biz=MzI5MDEzMzg5Nw==&mid=2660392782&idx=1&sn=d28e43bf6f7cf140eed9fffcf2f29e86&scene=1&srcid=0719GVTmJxt0EIHUCCt5VRuT&pass_ticket=62sxSNNbb4c5RynZPQfPfFbDs80zoGRU7eQWI84tsKNOI08773ppKTq6%2BIQFTHcv#rd
https://blog.csdn.net/u013380694/article/details/82912087
1.微服务如何保证数据的一致性：
	单机应用数据一致性：(或叫本地事务)
		在传统的本地事务中，为了保证数据一致性，我们只需要先开始一个事务，然后进行新增、修改、删除等操作，然后提交事务，如果发生异常就回滚。
		简简单单，就能够站在各大数据库厂商的肩膀上，实现数据一致性。
	微服务架构数据一致性：(或叫分布式事务)(传统分布式事务)
		背景：
			微服务的分布式事务
				微服务倡导将复杂的单体应用拆分为若干个功能简单、松耦合的服务，这样可以降低开发难度、增强扩展性、便于敏捷开发，从而被越来越多的开发者和公司推崇运用。但系统微服务化后，一个看似简单的功能，内部可能需要调用多个服务并操作多个数据库实现，服务调用的分布式事务问题变的非常突出，几乎可以说是无法避免。
				从广义上来讲，分布式事务其实也是事务，只是区别于单机事务不同之处是：由于业务上的定义和系统微服务架构的设计，很多大型的业务流程都被拆分成了多个单一的基础服务，而为了保证每个微服务都能独立进行开发和部署运行，通常都会采用一个微服务一个数据库的架构配套，然后将内部服务进行封装，以Rest api方式对外暴露。
				这样以往基于数据库来实现的数据操作，就变成了多个对外提供微服务的微服务系统之间的协同操作。在这种情况下，原有的单机事务方式已经不能够使用了，因为多个服务就意味着存在多个事务管理器和多个资源，单个微服务的本地事务管理器只能保证本地事务的ACID，为了在多个服务之间能保证业务的事务性，参与分布式事务的微服务通常会依托协调器来完成相关的一致性协调操作。
		介绍：
			微服务中出现需要同时访问多个数据库的情况。
			此时就需要分布式事务来保证数据一致性，也就是常说的两阶段提交协议（2PC，Two Phase Commitment Protocol）。
			具体的分为5个步骤：
				1.应用程序调用事务协调器中的提交方法
				2.事务协调器将联络事务中涉及的每个数据库，并通知它们准备提交事务（这是第一阶段的开始）
				3.接收到准备提交事务通知后，数据库必须确保能在被要求提交事务时提交事务，或在被要求回滚事务时回滚事务。如果数据库无法准备事务，它会以一个否定响应来回应事务协调器。
				4.事务协调器收集来自各数据库的所有响应。
				5.在第二阶段，事务协调器将事务的结果通知给每个数据库。如果任一数据库做出否定响应，则事务协调器会将一个回滚命令发送给事务中涉及的所有数据库。如果数据库都做出肯定响应，则事务协调器会指示所有的资源管理器提交事务。一旦通知数据库提交，此后的事务就不能失败了。通过以肯定的方式响应第一阶段，每个资源管理器均已确保，如果以后通知它提交事务，则事务不会失败。
				附：
					在这个协议中，最关键的点就是，多个数据库的活动，均由一个事务协调器的组件来控制。
		附：
			传统分布式事务不是微服务中一致性的最佳选择：
			1.
				首先，对于微服务架构来说，数据访问变得更加复杂，这是因为数据都是微服务私有的，唯一可访问的方式就是通过API。这种打包数据访问方式使得微服务之间松耦合，并且彼此之间独立非常容易进行性能扩展。
			2.
				其次，不同的微服务经常使用不同的数据库。应用会产生各种不同类型的数据，关系型数据库并不一定是最佳选择。
				例如，某个产生和查询字符串的应用采用Elasticsearch的字符搜索引擎；某个产生社交图片数据的应用可以采用图数据库，例如，Neo4j；
			3.
				基于微服务的应用一般都使用SQL和NoSQL结合的模式。但是这些非关系型数据大多数并不支持2PC。
				可见在微服务架构中已经不能选择分布式事务了。
		分布式事务实战：
			分布式事务解决方案-servicecomb-pack
				在微服务系统实际开发中，如何去实现协调器以处理分布式事务呢，这里的解决方案是采用华为提供的servicecomb-pack框架来解决这一问题。
				https://mp.weixin.qq.com/s/OCxFC42l_Ug3rmUH1oCWoQ
	
	*微服务架构数据最终一致性：(微服务中一致性的最佳选择)
		介绍：
			1.CAP理论：任何分布式系统只可同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）中的两点。
			2.分区容错性是基本要求，可用性一般是较好的选择。
			附：满足一致性要付出阻塞其他并发访问的代价，这需要一个不确定的时间。
			
			3.但是在服务和数据库之间维护数据一致性是非常根本的需求，因此微服务架构中选择满足最终一致性。
			附：最终一致性是指系统中的所有数据副本经过一段时间后，最终能够达到一致的状态。一段时间是指用户可接受范围内的一段时间。
		微服务架构实现最终一致性的三种模式：	
			可靠事件模式：...
			业务补偿模式：...
			TCC模式（Try-Confirm-Cancel）：...
