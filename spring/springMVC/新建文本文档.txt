?BindingResult
    public DocConfig insertDocConfig(@RequestBody @Validated DocConfig docCate, BindingResult bindingResult) {
        //加了BindingResult参数 就不会强制返回了吗 会把错放到BindingResult里头吗？
        //验证表单数据
        if (bindingResult.hasErrors()) {
            throw new BusinessException(bindingResult.getFieldError().getDefaultMessage());
        }
    }
    BindingResult的使用：https://blog.csdn.net/laok186/article/details/88972179
解
	mvc每个请求都是一个线程吗：
		mvc每个请求都是一个线程。
		打印Thread.currentThread().getName() 就能发现
	bean是单例的，那么bean属性不就是是不安全的：
		是的，controller也是一个bean，其属性不是线程安全的

ServletContext:
	https://blog.csdn.net/qq_36371449/article/details/80314024
	介绍
		ServletContext官方叫servlet上下文。
		服务器会为每一个工程创建一个对象，这个对象就是ServletContext对象。这个对象全局唯一，而且工程内部的所有servlet都共享这个对象。所以叫全局应用程序共享对象。
		目的让servlet之间传递与共享数据.
	域对象方法:
		setAttribute(String name,Object value);
			往域对象里面添加数据，添加时以key-value形式添加
		getAttribute(String name);
			根据指定的key读取域对象里面的数据
		removeAttribute(String name);
			根据指定的key从域对象里面删除数据
spring的ServletContextResources：
	ResourceLoader用来加载ServletContext资源，用于在WebApplicationContext外部使用（例如，在HttpServletBean或GenericFilterBean子类中）。

	例：
		// 从Web Context下的WEB-INF路径下读取book.xml资源
		ServletContextResource src = new ServletContextResource
		  (application , "WEB-INF/book.xml");
		// 获取该资源的简单信息
		System.out.println(src.getFilename());
	ClassPathResource 以及 ServletContextResource：
		FileSystemResource 和 ClassPathResource 是比较常见的两个获取资源的类。
		除了他们两个之外，ServletContextResource也比较常用。
		ClassPathResource 从系统的类路径中加载 
		FileSystemResource 从文件系统加载，比如说自己指定配置文件的全路径 
		InputStreamResource 从输入流中加载 
		ServletContextResource 从Servlet 上下文环境中加载 
		UrlResource 从指定的Url加载

springMvc的控制器作用域单例的:
	例：
		int scopeTestInt;
		@GetMapping("/testMvcDefaultScope")
		public String testMvcDefaultScope() {
			this.scopeTestInt = this.scopeTestInt + 1;
			return String.valueOf(this.scopeTestInt);
		}
		//scopeTestInt会一直不断的增加，清浏览器缓存去除会话等影响，也是一直不断增加

静态类方法等为什么能被多线程并发调用了？
	看jvm原理吗

HttpServletRequest 获取Body中的内容
	https://blog.csdn.net/pengjunlee/article/details/79416687
