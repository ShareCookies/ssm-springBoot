@RequestParam：
	https://www.cnblogs.com/zeroingToOne/p/8992746.html
	适用范围：
		@RequestParam同时适用于get和post，Content-Type为任意。
	属性：
		value：
			请求参数名
		defaultValue：
			参数在请求中不存在的话，就使用默认值
		required：
			默认为true
	使用：
		修饰方法参数：
		1.请求附带的参数会自动转换赋值到@RequestParam 所修饰的变量上。
		2.@RequestParam修饰的对象可以是基本数据类型和自定义对象。
	例：
		修饰基本数据类型:
			(@RequestParam(value="username",required=false) String userName)
			前端：
				?username=test	get,post均行，请求参数只要跟在链接后即可
				附：
					axios发送post请求，后端@RequestParam接收参数：
						https://www.cnblogs.com/yutianA/p/10677677.html
						import Qs from 'qs'//引入qs。axios中已经包含有qs，所以无需重新安装，直接引入就好
						data:Qs.stringify(chedata),//在传参之前先用qs.stringify转化一下格式
		修饰对象:
			(PagingRequest paging)
			注：
				@RequestParam修饰对象就是不给对象加@RequestParam注解。
				请求参数会被自动注入到所有对象的对应属性中。
			1.对象中有级联对象：
				<input type="text" name="address.province"><br>
				会被注入到对象属性的属性中！
				例：
					public class UrgerExporExcel {
						Urger urger;
						String word;
						List<String> exportFields;
						get set ...
					}
					前端参数要求：
						?urger.subject=测试&exportFields=subject,urgeStatus&word=0
			2.传到多对象：
				前端传参数到后端的多个对象。
				例1：
					后端：
						injectMultiObjectTest(Page<Student> page,Student student){...}
					前端：
						injectMultiObjectTest?total=111&name=哈哈
					注：
						total会到page对象，name会注入到student对象
						get传参到多对象的话，传参时参数不要带上对象前缀。两对象的属性要不同
				例2：
					后端：
						(String docId, @RequestParam("type")List<String> type)
					前端：
						http://localhost:6051/test/test?docId=3333&type=1&type=2
					附：	
						list的多种接收方式：
							1.@RequestParam指定List接收的参数名。
							请求：?type=1&type=2
							2.@PostMapping("")	(@RequestBody List<String> ids)
								请求：["1","2"]
							3.List<String>封装进一个对象中。
							分为两种情况，get和post的不同。
							...:
								https://blog.csdn.net/huangcsdnjava/article/details/75005498
								https://blog.csdn.net/Carson073/article/details/84874693
		注：
		1.@RequestParam加与不加的区别：
			使用了@RequestParam，则请求必须带有参数。（使用了defaultValue或required=false例外）
			不使用@RequestParam，则请求可带参数也可不带参，方法都能被访问执行。
	解析：?
		@RequestParam的原理：
			实质是将Request.getParameter()中的Key-Value参数Map，
			利用Spring的转化机制ConversionService配置，转化成了参数@RequestParam修饰的基本类型数据或对象。
			？https://www.cnblogs.com/lxh520/p/8760664.html
			在Content-Type: application/x-www-form-urlencoded的请求中， 
			get 方式中queryString的值，和post方式中 body data的值都会被Servlet接受到并转化到Request.getParameter()参数集中，所以@RequestParam可以获取的到。
@RequestBody：
	https://www.cnblogs.com/zeroingToOne/p/8992746.html
	介绍：
		当使用了该注解，spring将使用消息转换器将json类型的post请求转换为指定对象（控制器方法中被注解的参数对象）。
	使用：
		修饰方法参数。
		@RequestBody用于json类型的post请求数据，并将其转换成对应的数据类型。
		@RequestBody只能修饰一个对象。
	适用范围：
		@RequestBody适用于post，Content-Type为json。
	要求前端参数格式：
		{"draft":"浙江","copyNum":null} 即直接传对象

	解析：
			1.GET请求中，因为没有HttpEntity（是指http消息主体吗），所以@RequestBody并不适用。
			2.POST请求中，通过HttpEntity传递的参数，必须要在请求头中声明数据的类型Content-Type！
			3.SpringMVC通过使用HandlerAdapter 配置的HttpMessageConverters来解析HttpEntity中的数据，然后绑定到@RequestBody修饰的对象上。！
			使用@RequestBody接受的参数是不会被Servlet转化统一放在request对象的Param参数集中？


	例：
		(@RequestBody Dispatch dispatch
	注：
		1.多个@RequestBody异常：！
			原因：
				@RequestBody的含义是在当前对象获取整个http请求的body里面的所有数据，
				因此spring就不能将这个数据同时强制包装成Course和List类型，即无法多个body。
				并且从@requestbody设计上来说，只获取一次就可以拿到请求body里面的所有数据，
				就没必要出现有多个@requestbody出现在controller的函数的形参列表当中。
	解析：
		当参数上使用了@RequestBody，Spring将会查看请求中的Content-Type头部信息，并查找能够将请求体转换为对象的消息转换器。
		如客户端发送的数据是JSON表述形式，那么Content-Type头部信息可能就会是“application/json”。
		在这种情况下，DispatcherServlet会查找能够将JSON转换为Java对象的消息转换器。
		如果Jackson2库在类路径中，那么MappingJackson2HttpMessageConverter将会担此重任，
		将JSON表述转换为指定对象，然后传递到控制器方法中。
		
		如果控制器方法还使用了@ResponseBody注解，方法返回的对象将会转换为某种资源表述，发送给客户端。

附：
	?(HttpServletRequest request):
		./HttpServletRequest.txt
	@CookieValue，@RequestHeader，@PathVariable...:
		https://blog.csdn.net/a350204530/article/details/60763379
	    @GetMapping("/urger/exportExcel")
	HttpServletRequest HttpServletResponse:
		@GetMapping("/urger/exportExcel")	
		public void exportExcel(String beginDate, String endDate,HttpServletResponse response) throws Exception {
			//生产excel
			//HSSFWorkbook wb = ;

			//输出excel
			OutputStream output=null ;
			try {
				response.setContentType("application/octet-stream");
				response.addHeader("Content-Disposition",
						String.format("attachment;filename*=utf-8'zh_cn'%s", URLEncoder.encode("省高院收文登记表.xls", "UTF-8")));
				//response.setHeader("Content-disposition", "attachment;filename=createList.xls");
				output=response.getOutputStream();
				//wb.write(output);
			} catch (Exception e) {
				e.printStackTrace();
				throw new BusinessException("导出失败");
			}finally {
				if(output!=null){
					output.flush();
					output.close();
				}
			}
		}
		