Repository：
	为了避免持久化的逻辑分散到应用的各个组件中，最好将数据访问的功能放到一个或多个专注于此项任务的组件中。
	这样的组件通常称为数据访问对象（data access object，DAO）或Repository，且这些组件通常声明为接口。
	注：
		尽管Spring鼓励使用接口，但这并不是强制的——你可以使用Spring将bean（DAO或其他类型）直接装配到另一个bean的某个属性中，而不需要一定通过接口注入。！
		spring注入接口后，是如何找到接口的实现类的了!!
		https://ask.csdn.net/questions/720128?sort=votes_count

了解Spring的数据访问异常体系：
	前景：
		如果你曾经编写过JDBC代码（不使用Spring），你肯定会意识到如果不强制捕获SQLException的话，几乎无法使用JDBC做任何事情。
		SQLException表示在尝试访问数据库的时出现了问题，但是这个异常却没有告诉你哪里出错了以及如何进行处理。
		
		可能导致抛出SQLException的常见问题包括：
			应用程序无法连接数据库；
			要执行的查询存在语法错误；
			查询中所使用的表和/或列不存在；
			试图插入或更新的数据违反了数据库约束。
	介绍：		
		1.Spring的异常体系比JDBC简单的SQLException丰富得多，但它并没有与特定的持久化方式相关联。
		2.这意味着我们可以使用Spring抛出一致的异常，而不用关心所选择的持久化方案。
		！这有助于我们将所选择持久化机制与数据访问层隔离开来。
	
		4.Spring认为数据访问层触发异常的很多问题是不能在catch代码块中修复的。
		所以Spring使用了非检查型异常，而不是强制开发人员编写catch代码块（里面经常是空的）。
		把是否要捕获异常的权力留给了开发人员。
数据访问模板化：p348
	设计模式：模板方法模式。这是Spring在数据访问中所使用的模式。
	不管我们使用什么样的技术，都需要一些特定的数据访问步骤。
	如我们都需要获取一个到数据存储的连接并在处理完成后释放资源。这都是在数据访问处理过程中的固定步骤。
	但是每种数据访问方法又会有些不同，我们会查询不同的对象或以不同的方式更新数据，这都是数据访问过程中变化的部分。
	Spring如何使用模板方法设计模式进行数据访问：
		Spring实现数据访问（使用了模板方法设计模式）.png
	