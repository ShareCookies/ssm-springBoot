security是如何实现用户登录的：？
	...
	https://blog.csdn.net/my_learning_road/article/details/79833802
	登陆实现思路：
		简要：
			filter：
				filter拦截请求，生成Authentication，然后调用provider进行用户认证。
				附：？
					登录认证：UsernamePasswordAuthenticationFilter
					登录成功后，后面的请求认证：cookies类型filter？
			provider：
				provider实现了：
					用户的登陆，和说明了其适配那种Authentication。
				provider如何被应用：
					filter会调用AuthenticationManager，让其找到适配的provider进行
UsernamePasswordAuthenticationFilter:
	该过滤器作用：
		？
		UsernamePasswordAuthenticationFilter是针对使用用户名和密码进行身份验证而定制化的一个过滤器。即它用来用户初次登录校验使用。
		？
			那登录成功后信息保存在哪
			后续登录等是如何持有登录状态和信息的了
		
	
	？：该过滤器仅使用于login请求吗
		public UsernamePasswordAuthenticationFilter() {
			super(new AntPathRequestMatcher("/login", "POST"));
		}
	AbstractAuthenticationProcessingFilter源码：
		思路：
			UsernamePasswordAuthenticationFilter从http请求中获取用户名和登录密码，封装成UsernamePasswordAuthenticationToken对象，
			然后调用AuthenticationManager的验证方法，通过则登录成功，信息保存到security上下文中，失败则返回403.
		doFilter(){
			//1. 不需要校验则放行
			if (!requiresAuthentication(request, response)) {
				chain.doFilter(request, response);
				return;
			}
			//2. 用户认证
			authResult = attemptAuthentication(request, response);
			//UsernamePasswordAuthenticationFilter的attemptAuthentication方法，从请求获取用户账号、密码，然后调用AuthenticationManager的authenticate来认证用户
				String username = obtainUsername(request);
				String password = obtainPassword(request);
				return this.getAuthenticationManager().authenticate(authRequest);
		}
	？
		https://www.jianshu.com/p/e98cdf23b991
		AbstractAuthenticationProcessingFilter:
			AbstractAuthenticationProcessingFilter是个抽象类，在整个身份验证的流程中主要处理的工作就是所有与Web资源相关的事情，并且将其封装成Authentication对象，最后调用AuthenticationManager的验证方法。
			附：
				实现类有cookie登陆，用户名密码登陆等。
	
AuthenticationManager如何完成用户的校验工作：
	介绍：
		AuthenticationManager唯一实现类是ProviderMananger。
		ProviderMananger会根据各个AuthenticationProvider实现类的support方法询问哪个具体实现类能支持该token工作，找到后调用其authenticate进行认证判断。
		附：
			设计概念：AuthenticationManager接口设计上并不是用于完成特定的身份验证工作的，而是调用其所配发的AuthenticationProvider接口去实现的。
			?
				ProviderMananger如何获取到AuthenticationProvider的了。
	AuthenticationProvider（验证核心的工作者）：
		AuthenticationProvider只包含两个方法声明:
			1. boolean supports(Class<?> authentication)：是否支持当前验证协议
				1. AuthenticationManager可以通过调用该方法，辨别当前AuthenticationProvider是否完成相应验证工作的。
				2. 注：
					不同的AuthenticationProvider支持不同的验证场景，所以AuthenticationProvider的各实现类只关心当前Authentication是不是他预先设计处理的类型即可。
					例：
						在使用用户名和密码的验证场景中，验证使用的用户名和密码被封装成了 UsernamePasswordAuthenticationToken 对象。
						Spring Security内置了DaoAuthenticationProvide来支持UsernamePasswordAuthenticationToken的校验。

			2.authenticate：DaoAuthenticationProvide的验证方法原理
				/**
				*尝试去	认证传递过来的Authentication对象，如果成功，则会返回一个全面详细（包含了授权信息）的Authentication对象。
				*/
				Authentication authenticate(Authentication authentication) throws AuthenticationException{
					...
					//1. 从principal和credentials获取用户名和密码
					//这里为什么获取的就是用户名和密码，因为通过了support的确认 所以在DaoAuthenticationProvider的视角里，当前的Authentication最起码一定是UsernamePasswordAuthenticationToken的形式了
					String username = (authentication.getPrincipal() == null) ? "NONE_PROVIDED" : authentication.getName();
					String presentedPassword = authentication.getCredentials().toString();
					
					//DaoAuthenticationProvider的retrieveUser方法
					//2. 通过UserDetailsService使用username获取对应的UserDetails
						UserDetails loadedUser = this.getUserDetailsService().loadUserByUsername(username);
					//3.最后通过对比密码是否一致
					//additionalAuthenticationChecks的方法调用了密码校验器的matches方法进行密码校验
					//校验逻辑：调用密码编译器将用户提交的密码进行编译，然后在与数据库获取的用户的密码进行对比，认证通过则登入成功。
					//详：./SpringSecurity密码加密与校验.txt
						if (!passwordEncoder.matches(presentedPassword, userDetails.getPassword())){}
					//4.向PrivoderManager返回最终的身份验证结果与身份信息。这样一个特定场景使用用户名和密码的验证流程就完成了。
					return createSuccessAuthentication(principalToReturn, authentication, user);
					...
				}
UsernamePasswordAuthenticationToken：（封装用户名密码的基石）
	https://www.jianshu.com/p/e98cdf23b991
	UsernamePasswordAuthenticationToken继承了抽象类，其主要针对使用用户名和密码验证的请求按照约定进行了一定的封装：将username赋值到了principal ，而将password赋值到了credentials。
	
	从HttpRequest中获取对应的参数字段
	
	
	
	
	，并将其封装进Authentication中传递给AuthenticationManager进行身份验证。
通过UsernamePasswordAuthenticationToken实例化了Authentication接口，继而按照流程，将其传递给AuthenticationMananger调用身份验证核心完成相关工作。