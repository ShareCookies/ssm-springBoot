注：
	前三种都是Spring经典AOP实现的变体。
		（即前3种的实现原理都是一样的。）
	Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截。

1. 基于代理的经典Spring AOP：	
	介绍：
		使用ProxyFactory生成代理对象，来实现aop。
	例：
		./例子/SpringAOPAchieveSimply/
		./例子/SpringAOPAchieveWithDefaultPointcutAdvisor/
		./例子/SpringAOPAchieveWithNameMatchMethodPointcutAdvisor/
	附：
		Spring经典AOP编程模型，现在显得非常笨重和复杂。
		Spring引入了简单的声明式AOP和基于注解的AOP，提供了更简洁的面向切面编程方式。
2. 声明式AOP
	XML中声明切面p160
	介绍：
		借助Spring的aop命名空间，我们可以将纯POJO转换为切面。
			实际上，这些POJO只是提供了满足切点条件时所要调用的方法。
		遗憾的是，这种技术需要XML配置，但这的确是声明式地将对象转换为切面的简便方式。
	附：
		1.
		面向注解的切面声明有一个明显的劣势，你必须能够为通知类添加注解。为了做到这一点，必须要有源码。 
		如果你没有源码的话，可考虑在Spring XML配置文件中声明切面。
3. 基于注解的AOP
	./Spring注解实现AOP.txt
4. 注入式AspectJ切面(适用于Spring各版本)：p169
	介绍：
		如果你的AOP需求超过了简单的方法调用（如构造器或属性拦截）， 那么你需要考虑使用AspectJ来实现切面。
		AspectJ提供了Spring AOP所不能支持的许多类型的切点。
	使用：
		？

		