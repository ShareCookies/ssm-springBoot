参考·：
	spring实战P76
Spring从两个角度来实现自动化装配bean：
	组件扫描（component scanning）：
		Spring会自动发现应用上下文中所创建的bean。
		hcg：
			就是扫描bean。
	自动装配（autowiring）：
		Spring自动满足bean之间的依赖。
		hcg：
			就是加载bean。
	hcg：
		1.组件扫描+构造性注解来实现将bean注册到容器中。
		2.自动装配注解，来使spring容器自动管理bean的依赖。（即自动往bean的属性中注入所需要的bean）
1.定义bean：
	实现方式：
		1.接口或类上使用构造型注解，即可定义一个bean。
		2.xml中使用<bean>标签与实际类关联，即可定义一个bean。
	bean的id：
		Spring应用上下文中要求bean要指定一个ID作为标识符。
		注：
			@Component定义的bean，其id的默认为类名，且第一个字母变为小写。
		自定义id：
			例：
				@Component('test')
	构造型注解（stereotype）：
		介绍：
			开启注解扫描器后，spring会把构造型注解标注的类注册为bean，这些类对象都将由spring的bean容器管理。
			如@Component等均是构造型注解。

		构造型注解区别：
			https://blog.csdn.net/fansili/article/details/78740877
			这几个注解几乎可以说是一样的，因为被这些注解修饰的类就会被Spring扫描到并注入到Spring的bean容器中。
			@Component是通用注解，其他三个注解是这个注解的拓展，并且具有了特定的功能 。
			例：
				@Controller 注解的bean会被spring-mvc框架所使用，可在该类上添加获取请求，请求转发，重定向等功能。
			注：
				@Controller和@Repository？注解是不能被其他注解所互换的。
		@Component
			把类标记为bean。
			@Component是通用注解，spring其他三个注解是这个注解的拓展。
			其他三个注解比component多了一些特定的功能。
			注解属性：
				value：
					为bean手动设置id。
		@Controller
			把类标记为bean。
			把类注册为bean，且该类属于控制层。
			通常在该类上添加获取请求，请求转发，重定向等功能。
		@Service
			把类标记为bean。
			把类注册为bean，且该类属于业务逻辑层。
		@Repository：
			https://blog.csdn.net/f45056231p/article/details/81676039
			把类标记为bean。
			把类注册为bean，且该类属于持久层。
			具有将数据库操作抛出的原生异常翻译转化为spring的持久层异常的功能。？
		@Mapper:！
			https://blog.csdn.net/phenomenonstell/article/details/79033144
			从mybatis3.4.0开始加入了@Mapper注解，目的就是为了不再写mapper映射文件.
			注：
				@Mapper同时也具备了@repository的功能。
			依赖包：
				<dependency>
					<groupId>org.mybatis</groupId>
					<artifactId>mybatis</artifactId>
					<version>3.4.5</version>
				</dependency>
		@Named()：p66
			该注解是由Java依赖注入规范（Java Dependency Injection）定义的。
			Spring支持将@Named作为@Component注解的替代方案。
		构造型注解，使用在接口上和使用在实现类上区别：
			！
2.注入bean（或叫自动装配）：
	实现方式：
		1;属性上使用@Autowired或@Resource ，即可向该属性注入bean。
			注：

		2;xml中使用<property>和<ref>，且属性有对应的set方法，即可向该属性注入bean
	@Autowired：
		使用位置：
			1.使用在属性上
			2.@Autowired注解还能够用在构造器上。
			3.还能用在属性的Setter方法上。
			解析：
				@Autowired注解可以用在类的任何方法上。
				Spring都会尝试满足方法参数上所声明的依赖。
				例：
					用在insertDisc()方法上
		注解属性：
			required：
				如果没有匹配的bean，那么在应用上下文创建的时候，Spring会抛出一个异常。
				为了避免异常的出现，你可以将@Autowired的 required属性设置为false。
		
	@Recource和@Autowired：p68
		https://blog.csdn.net/qq_35923749/article/details/77159213#commentBox
		@Autowired 与@Resource都可以用来装配bean。
		@Resource属于J2EE的，作用相当于Spring的@Autowired。
		区别:
			@Autowired按byType自动注入:
				不管是构造器、Setter方法还是其他的方法，Spring都会尝试满足方法参数上所声明的依赖。
				注：
					如果没有匹配的bean，那么在应用上下文创建的时候，Spring会抛出一个异常。
					为了避免异常的出现，你可以将@Autowired的required属性设置为false：
			@Resource默认按 byName自动注入。
		注：
			@Inject注解来源于Java依赖注入规范，Spring同时支持@Inject和@Autowired。
	
3.扫描组件：
	介绍：
		1.只有使用了构造型注解，才需要开启组件扫描。
		2.如果1,2步均使用了xml实现，则无需开启组件扫描。
	组件扫描作用：
		查找bean，并把bean交给spring的容器管理。
		注：
			如果1,2步均使用了xml实现，则bean就已经交给了spring容器管理。
	实现方式：
		1.配置启动类上使用@ComponentScan注解，即可启用组件扫描
		2.XML使用<context:component-scan>启用组件扫描。
		注：
			该元素会有与@ComponentScan注解相对应的属性和子元素。
	扫描位置：p67
		如果没有为@ComponentScan设置任何属性。
		按照默认规则，它会以配置类所在的包作为基础包（base package）来扫描组件。
		会扫描基础包以及基础包下的所有子包。
		
		手动指定扫描位置：
			可用value属性或basePackages属性中指明基础包的名称。
			@ComponentScan(“基础包位置”)
			注：
				可指定为包中所包含的类或接口，这些类所在的包将会作为组件扫描的基础包。
		？：
			1.那这些bean会交给那个Spring容器管理了
			
	显式装配bean：
		介绍:
			有时自动化配置的方案是行不通的。
			例：你想要将第三方库中的组件装配到你的应用中，在这种情况下，是没有办法在它的类上添加注解的。
			此时就要采用显式装配的方式，有两种可选方案：Java和XML。
		通过Java代码装配bean：
			p73
			实现：
				1.创建JavaConfig类的关键在于为其添加@Configuration注解，@Configuration注解表明这个类是一个配置类。！为啥一定要声明为配置类、
				2.声明bean:
					编写一个方法,然后给这个方法添加@Bean注解。
					例：
						@Bean
						Public Test test(){return new Test();}
						方法体中包含了最终产生bean实例的逻辑。
					注：
						1.@Bean注解会告诉Spring将这个方法返回的对象注册为Spring应用上下文中的bean。
						2.默认情况下，bean的ID与带有@Bean注解的方法名是一样的。
				3.注入bean方式：
					1；
						JavaConfig中装配bean的最简单方式就是引用创建bean的方法。
						例：
							@Bean
							Public Test2 test2(){return new Test2(test());}
							1.这里并没有使用默认的构造器构建实例，而是调用了需要传入参数的构造器来创建实例。
							2.看起来，Test是通过调用test()得到的，但情况并非完全如此。
							因为sgtPeppers()方法上添加了@Bean注解，Spring将会拦截所有对它的调用，并确保直接返回该方法所创建的bean，而不是每次都对其进行new后的调用。
							3.默认情况下，Spring中的bean都是单例的。
					2；
						当Spring调用配置方法创建bean的时候，它会自动装配一个符合参数的bean到配置方法之中。
						例：
							@Bean
							Public Test2 test2(Test test){return new Test2(test);}
						注：
							通过这种方式引用其他的bean通常是最佳的选择，因为它不会要求将所有bean声明到同一个配置类之中。
							即符合参数的bean不管是采用什么方式创建出来的，Spring都会将其传入到配置方法中。
					注：
						1推荐：DI风格之set
							例子中方法体内使用了使用了构造器DI，但是我们完全可以采用其他风格的DI配置。
							{Test2 test2= new Test2();test2.setTest(test);return test2;}

		通过XML装配bean:
			p77
			介绍：
				在使用XML为Spring装配bean之前，你需要创建一个新的配置规范。
				在使用JavaConfig的时候，这意味着要创建一个带有@Configuration注解的类。!
				而在XML配置中，这意味着要创建一个XML文件，并且要以<beans>元素为根。
				即
				作为起步，在JavaConfig中所需要的只是@Configuration。
				但在使用XML时，<beans>根元素中需要在配置文件的顶部声明多个XML模式（XSD）文件，这些文件定义了配置Spring的XML元素。
			Spring Tool Suite：
				https://spring.io/tools/sts
				能够辅助创建SpringXML配置文件
			声明一个bean：
				使用<bean>元素，该元素类似于JavaConfig中的@Bean注解。
			注入bean方式：
				p79
				构造器注入bean引用:
					<constructor-arg>元素
				属性注入:
					<property>元素
		配置组合：
			java配置类组合:
				使用@Import注解将多个配置类组合在一起。
				例：
					@Import(CDConfig.class)
					注：
						该注解使用在配置类上。
			JavaConfig中引用XML配置:
				使用@ImportResource注解，
				例：
					@ImportResource("classpath:cdconfig.xml")
					加载位于根类路径下的文件
			xml配置组合:
				XML中，可以使用import元素来导入拆分开的XML配置。
				例：
					<import resource="classpath:cdconfig.xml"/>
				注：
					classpath*:,它表示不仅会在class路径中去查找文件，还会在jar中去查找文件。

			XML配置中引用JavaConfig：
				使用bean声明元素即可。
				例：
					<bean class="">
			注：
				通常都会创建一个根配置，该配置会将多个装配类或XML文件组合起来。
				然后在根配置中启用组件扫描。

		注：
			组件扫描和显式配置可同时使用。
			通用的规则，对强依赖使用构造器注入，而对可选性的依赖使用属性注入。
	推荐：
		自动化配置》Java的配置》XML的配置
附：
	./bean的手动获取.txt