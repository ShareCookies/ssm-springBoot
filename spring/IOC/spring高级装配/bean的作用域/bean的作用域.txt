介绍：p117
	在默认情况下，Spring应用上下文中所有bean都是作为以单例（singleton）的形式创建的。
		即一个bean不管被注入到其他bean多少次，每次所注入的都是同一个实例。
	作用域类型：
		Spring定义了多种作用域，可以基于这些作用域创建bean。
		单例（Singleton）：（默认）
			在整个应用中，只创建bean的一个实例。
		原型（Prototype）：
			每次注入或者通过Spring应用上下文获取的时候，都会创建一个新的bean实例。
		请求（Rquest）：
			在Web应用中，为每个请求创建一个bean实例。
			注：
				请求作用域与会话作用域 面临相同的装配问题，
				因此请求作用域的bean应该也以作用域代理的方式进行注入。
		会话（Session）：
			在Web应用中，为每个会话创建一个bean实例。
			
规定bean的作用域：p118
	声明bean时加上@Scope注解，即可指定bean的作用域。
	例：
		@Component
		@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) //@Scope("prototype")
		public Class DefineBean{...}
	注：
		1.Java配置中规定bean的作用域，组合使用@Scope和@Bean来指定所需的作用域。
		2.XML中规定bean的作用域，使用<bean>元素的scope属性来设置作用域。
附：ssm常见作用域分析：s 。且赋值为2后 任何线程也都打印2 都一样后续打印都是单
        int controllerScope;
    controller是单例：
        //controller是单例。例：任何线程 打印的clas
        @GetMapping("/test")
        public String test() {
            System.err.println(Thread.currentThread().getName());
            System.err.println(this);
            System.err.println(controllerScope);
            //？一个实例为何可以被并发了，java是如何实现的了
    //        try {
    //            Thread.sleep(10000L);
    //        } catch (InterruptedException e) {
    //            e.printStackTrace();
    //        }
            return "";
        }
    mapper应该也是单例：！
        因为Mapper的主要作用是找sql,所以通过会话工厂调用sql连接 进行查询 然后返回数据即可。

附：
如何将会话型bean注入单例bena中：
	场景：
		商店bean用单例，因为就一个商店。每个顾客bean用会话型。
	解决方案：
		1.使用@Scope的proxyMode属性：
			1.声明的bean是接口时，proxyMode设置为，接口名.INTERFACES。（推荐的代理模式）
				表明代理将实现指定接口，并将调用委托给实现bean。
			2.声明的bean是具体类时，proxyMode设置为，类名.TARGET_CLASS
				表明要以生成目标类扩展的方式创建代理。
				注：
					bean声明时是具体类的话，Spring就没有办法创建基于接口的代理了，它必须使用CGLib 来生成基于类的代理。
			例1：
				@Component
				//这个属性解决了将会话或请求作用域的bean注入到单例bean中所遇到的问题。
				@Scope(proxyMode=ScopedProxyMode.INTERFACES)
				...
		2.xml中声明会话型bean：
			p121
	解析：	
		1.将会话或请求作用域的bean注入到单例bean中所遇到的问题：
			当将会话型ShoppingCart bean注入到单例StoreService bean。
			会产生以下矛盾：
				1.因为StoreService是一个单例的bean，会在Spring应用上下文加载 的时候创建。
				当它创建的时候，Spring会试图将ShoppingCart bean 注入到setShoppingCart()方法中。
				但是ShoppingCart bean是 会话作用域的，此时并不存在。直到某个用户进入系统，创建了会话 之后，才会出现ShoppingCart实例。
				2.系统中将会有多个ShoppingCart实例，每个用户一个。
				我们并不想让Spring注入某个固定的ShoppingCart实例 到StoreService中。
				我们希望的是当StoreService处理购物车功能时，它所使用的ShoppingCart实例恰好是当前会话所对应的那一个。
		2.作用域代理：
			使用了作用域代理，
			Spring并不会将实际的ShoppingCart bean注入到StoreService中， Spring会注入一个到ShoppingCart bean的代理，如图3.1所示。
			这 个代理会暴露与ShoppingCart相同的方法，所以StoreService 会认为它就是一个购物车。
			但是，当StoreService调 用ShoppingCart的方法时，代理会对其进行懒解析并将调用委托 给会话作用域内真正的ShoppingCart bean。 		
