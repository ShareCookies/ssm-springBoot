springBean的生命周期：
	介绍：
		图展示了bean装载到Spring容器中的生命周期过程。
		./springBean的生命周期.png
		
	例：
		https://www.cnblogs.com/wangjiming/p/11669091.html
		附1：
			./例/例1/
		附2：
			./例/例2/
	详：
	1. 实例化bean：（Spring容器对bean进行实例化）
		介绍：
			Spring容器对bean进行实例化，即容器调用类的构造函数。
		？
			实例化时如果没有无参构造函数了
	2. 为对象属性赋值：
		介绍：
			容器为对象属性赋值。
		附：Spring中bean的注入方式：
			https://blog.csdn.net/a745233700/article/details/89307518
			属性注入
				get set 
				@resource 原理？
			构造器注入
			工厂方法注入?

		附：容器设置对象属性原理：？
			实例化后的对象被封装在BeanWrapper对象中，紧接着Spring根据BeanDefinition中的信息 以及通过BeanWrapper提供的设置属性的接口完成依赖注入。
			
	注：
		goto：bean的加载顺序：(构造方法注入才有)

	3-11:
		处理Aware回掉接口：
			3. bean的id 设置后回掉：
				如果bean实现 了BeanNameAware接口，
				容器就会调用其实现的setBeanName(String beanId)方法，
				此处传递的就是Spring配置文件中Bean的id值；
			4. 工厂回掉
				如果bean实现 了BeanFactoryAware接口，
				容器就会调用其实现的setBeanFactory()方法，将BeanFactory容器实例传入。
				？
					难道到这里才开始真正放入容器吗？？？
			5. 应用上下文回掉
				如果bean实现了ApplicationContextAware接口，
				容器就会调用其实现的setApplicationContext()方法，将bean所在的应用上下文的引用传入进来;
		bean初始化
			6. 自定义拦截器-bean初始回掉
				即有bean实现了BeanPostProcessor接口。
				则自定义拦截器的postProcessBeforeInitialization(Object obj, String s)方法，将会在自定义初始化方法前被容器调用。
				附：此处通常用于对Bean进行一些自定义的处理
			7. bean初始完成回掉
				如果bean实现了 InitializingBean接口，
				Spring将调用它们的afterPropertiesSet()方法。
					
			8. 调用自定义的初始化方法
				如果bean使用init-method（init-method属性）声明了初始化方法，对应方法在这是就会被调用;
				附：
					与8同样效果吗
			9. 自定义拦截器-bean初始完成回掉
				即有bean实现了BeanPostProcessor接口。
				则自定义拦截器的postProcessAfterInitialization(Object obj, String s)方法，将会在自定义初始化方法完成后被容器调用。
				附：
					1. 由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术？
				
					2. 此时，Bean就已经被正确创建了，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁;
		bean销毁：
			10. bean销毁回掉
				如果bean实现了DisposableBean接口，容器被销毁时Spring将调用bean的destroy()接口方法。
			11. 调用自定义的初始化方法
				附：同样效果：如果bean使用destroy-method（destroy-method）声明了销毁方法，该方法也会被调用。

附：
	bean的加载顺序：(构造方法注入才有)
		介绍：
			1. 属性是使用构造方法进行注入时，那么spring bean的创建是有顺序的。
				注：但使用其它类型的注入时，不会遇到这个问题。因为其他方式是在需要时才会被注入，而不是上下文加载时就被注入。
			2. Spring上下文在加载所有的bean时，他会尝试按照他们(构造器)关联关系的顺序进行创建。
			所以当不存在循环依赖时，就可顺利加载bean。
		例：
			Bean A → Bean B → Bean C
			Spring会先创建Bean C，再创建Bean B（并将Bean C注入到Bean B中），最后再创建Bean A(并将Bean B注入到Bean A中)。
		附：
			1.如果bean的构造方法存在循环依赖，Spring上下文不知道应该先创建哪个Bean,因为它们依赖于彼此。
			Spring容器就会抛出一个BeanCurrentlyInCreationException。
			

		bean循环依赖解决方案：
			https://www.jianshu.com/p/b65c57f4d45d
			解决方法：
				方式1：重新设计：
					当你有一个循环依赖，很可能你的各责任没有得到很好的分离。
					有很多种方法来应对Spring的循环依赖，但首先你应该考虑重新设计你的bean，它们通常意味着是一种可以被提高的设计症状。
				方式2：使用 @Lazy
					使用 @Lazy对一个Bean进行延时加载。
					即这个Bean并没有完全的初始化完，实际上他注入的是一个代理，只有当他首次被使用的时候才会被完全的初始化。
					例：
						@Component
						public class CircularDependencyA {
							private CircularDependencyB circB;
							@Autowired
							public CircularDependencyA(@Lazy CircularDependencyB circB) {
								this.circB = circB;
							}
						}
				方式3：使用 Setter/Field 注入
					其中最流行的解决方法，就是Spring文档中建议，使用setter注入。
					例：
						private CircularDependencyA circA;
						@Autowired
						public void setCircA(CircularDependencyA circA) {
							this.circA = circA;
						}
					注：
						1.使用该方式创建Bean，实际上它的依赖并没有被注入，只有在你须要的时候他才会被注入进来。
						？
							我在set方法中断点了，可是看到的却是bean在创建时属性就注入了，
							？如何证明是在需要的时候才注入了？那我断点看到的是什么了
						2.可无需set，直接在属性上使用@Autowired或@Resource注解即可。
					
				方式4：使用 @PostConstruct？
				方式5：实现ApplicationContextAware and InitializingBean接口？
