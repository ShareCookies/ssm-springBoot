P98
https://www.cnblogs.com/SummerinShire/p/6392242.html
环境:
	在开发软件过程一个很大的挑战就是将应用程序从一个环境迁移到另外一个环境。
	不同的环境中某个bean会有所不同。如数据库配置等。
profile：（环境配置）
	spring的profile功能就是为应对不同开发环境需要不同的bean而开发的。
	要使用profile，你首先要将所有不同的bean定义整理到一个或多个profile之中，在将应用部署到每个环境时，要确保对应的profile处于激活（active）的状态。
	只有当Profile被激活的时候，才会将Profile对应的配置属性和Bean注册到Spring容器中。

	注：
		Spring为环境相关的bean所提供的解决方案其实与构建时的方案没有太大的差别。
		不过Spring并不是在构建的时候做出这样的决策，而是等到运行时再来确定。
		这样的结果就是同一个部署单元（可能会是WAR文件）能够适用于所有的环境，没有必要进行重新构建。
		HCG:
			在编译时要指定默认激活的环境，在不同环境中运行项目时，你可以添加命令来激活不同环境。
			但我一般是切换默认激活的环境然后在重新编译。
	
	附录：
		举个更具体的例子，我们以前所定义的Bean，当Spring容器一启动的时候，就会一股脑的全部加载这些信息完成对Bean的创建。
		而使用了Profile之后，它会将Bean的定义进行更细粒度的划分，会跟据bean的profile信息将这些定义的Bean划分为几个不同的组，
		当Spring容器加载配置信息的时候，首先查找激活的Profile，然后只会去加载被激活的组中所定义的Bean信息，而不被激活的Profile中所定义的Bean定义信息是不会加载用于创建Bean的。
配置profile bean：
	Java配置类中指定bean所属的profile：p100
		Java配置类中使用@Profile注解指定bean属于哪个profile。
		@Profile：
			用法：
				应用在类上：
					@Profile注解应用类级别上。
					它会告诉Spring这个配置类中的bean只有在指定的profile激活时才会创建。
				应用在方法级别上：
					应用在方法级别上，即与@Bean注解一同使用。
					效果只作用与当前bean。
				
				注：
					Spring 3.1中，只能在类级别上使用@Profile注解。
					Spring 3.2开始，也可以在方法级别上使用@Profile注解
	XML配置中指定bean所属的profile：
		p102
激活profile:  
	激活Profile:  
		1.通过spring.profiles.active属性,来激活profile:
			设置了 spring.profiles.active属性的话，那么它的值就会用来确定哪个profile是激活的。

		2.通过spring.profiles.default属性,来激活profile:
			如果没有设置spring.profiles.active属性的话，那Spring将会查找spring.profiles.default的值。 

			注：
				如果spring.profiles.active和spring.profiles.default 均没有设置的话，
				那就没有激活的profile，因此只会创建那些没有定义在profile中的bean。
		注：
			profile是可以同时激活多个的
			
	设置active和default属性：
		这两个属性值其实是Spring容器中定义的属性，而我们在实际的开发中很少会直接操作Spring容器本身。
		所以这两个属性，要设置在指定的位置上，让Spring容器自动去这些位置读取，然后自动设置。
		这些位置可以为以下地方：
			作为DispatcherServlet的初始化参数；
			作为Web应用的上下文参数；
			作为JNDI条目；
			作为环境变量；
			作为JVM的系统属性；
			在集成测试类上，使用@ActiveProfiles注解设置。


