https://www.jianshu.com/p/36a7775b04ec
什么是消息队列:
	我们可以把消息队列比作是一个存放消息的容器，当我们需要使用消息的时候可以取出消息供自己使用。
	消息队列是分布式系统中重要的组件，使用消息队列主要是为了通过异步处理提高系统性能和削峰、降低系统耦合性。
	目前使用较多的消息队列有ActiveMQ，RabbitMQ，Kafka，RocketMQ。
		
	附：
		使用消息队列带来的一些问题
			系统可用性降低： 			
				系统可用性在某种程度上降低。
				在加入MQ之前，你不用考虑消息丢失或者说MQ挂掉等等的情况，但是，引入MQ之后你就需要去考虑了！
			系统复杂性提高： 
				加入MQ之后，你需要保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性等等问题！
			一致性问题： 	
				我上面讲了消息队列可以实现异步，消息队列带来的异步确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息怎么办？这样就会导致数据不一致的情况了!
为什么要用消息队列:
	我觉得使用消息队列主要有两点好处：
	1.通过异步处理提高系统性能（削峰、减少响应所需时间）;
		具体介绍：https://www.jianshu.com/p/36a7775b04ec
		在不使用消息队列服务器的时候，用户的请求数据直接写入数据库
			在高并发的情况下数据库压力剧增，使得响应速度变慢。
		但是在使用消息队列之后，用户的请求数据发送给消息队列之后立即返回，再由消息队列的消费者进程从消息队列中获取数据，异步写入数据库。
			由于消息队列服务器处理速度快于数据库（消息队列也比数据库有更好的伸缩性），因此响应速度得到大幅改善。
		附：
			1.秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。
			2.因为用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败。因此使用消息队列进行异步处理之后，需要适当修改业务流程进行配合。
				比如用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功，以免交易纠纷。这就类似我们平时手机订火车票和电影票。

	2.降低系统耦合性。
		消息队列使利用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。 从上图可以看到消息发送者（生产者）和消息接受者（消费者）之间没有直接耦合，消息发送者将消息发送至分布式消息队列即结束对消息的处理，消息接受者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。
		附：
			1.对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计。
			2.
				为了避免消息队列服务器宕机造成消息丢失，会将成功发送到消息队列的消息存储在消息生产者服务器上，等消息真正被消费者服务器处理后才删除消息。
				在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。
	附：
		如果在面试的时候你被面试官问到这个问题的话，一般情况是你在你的简历上涉及到消息队列这方面的内容，这个时候推荐你结合你自己的项目来回答。
消息队列规范:
	JMS API：
		JMS JAVA Message Service,java消息服务。
		JMSAPI是一个消息服务的标准或者说是规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。
		它使分布式通信耦合度更低，消息服务更加可靠以及异步性。
		附：
			ActiveMQ 就是基于 JMS 规范实现的。

		JMS两种消息模型
			1.点到点（P2P）模型
				使用队列（Queue）作为消息通信载体；
				一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时。
					比如：我们生产者发送100条消息的话，两个消费者来消费一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）
			2.发布/订阅（Pub/Sub）模型
				使用主题（Topic）作为消息通信载体，类似于广播模式；发布者发布一条消息，该消息通过主题传递给所有的订阅者，在一条消息广播之后才订阅的用户则是收不到该条消息的。
		JMS 五种不同的消息正文格式
			JMS定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收以一些不同形式的数据，提供现有消息格式的一些级别的兼容性。
			StreamMessage -- Java原始值的数据流
			MapMessage--一套名称-值对
			TextMessage--一个字符串对象
			ObjectMessage--一个序列化的 Java对象
			BytesMessage--一个字节的数据流
	AMQP协议：
		Advanced Message Queuing Protocol,高级消息队列协议（二进制应用层协议）
		一个提供统一消息服务的应用层标准 ,为面向消息的中间件设计，兼容 JMS。
		附：
			RabbitMQ 就是基于 AMQP 协议实现的。
	总结：
		1.AMQP 为消息定义了线路层（wire-level protocol）的协议，而JMS所定义的是API规范。在 Java 体系中，多个client均可以通过JMS进行交互，不需要应用修改代码，但是其对跨平台的支持较差。而AMQP天然具有跨平台、跨语言特性。
		2.JMS 支持TextMessage、MapMessage 等复杂的消息类型；而 AMQP 仅支持 byte[] 消息类型（复杂的类型可序列化后发送）。
		3.由于Exchange 提供的路由算法，AMQP可以提供多样化的路由方式来传递消息到消息队列，而 JMS 仅支持 队列 和 主题/订阅 方式两种。
附：
	常用消息队列产品介绍和对比
		https://www.cnblogs.com/xifengxiaoma/p/9391647.html
