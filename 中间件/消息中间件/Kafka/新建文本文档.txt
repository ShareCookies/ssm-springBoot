官网：http://kafka.apache.org/
Kafka教程：
	安装：https://www.cnblogs.com/qingyunzong/p/9005062.html
	介绍：https://www.cnblogs.com/qingyunzong/p/9004509.html
	架构：https://www.cnblogs.com/qingyunzong/p/9004593.html
	高可用：https://www.cnblogs.com/qingyunzong/p/9004703.html
	Kafka在zookeeper中的存储：https://www.cnblogs.com/qingyunzong/p/9007107.html
介绍：
	Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统。
	具有以下特性：
		快速持久化，可以在O(1)的系统开销下进行消息持久化；
		高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；
		完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现负载均衡；
		支持Hadoop数据并行加载，？
			对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制统一了在线和离线的消息处理。
	Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。
		？为什么rabbitMq称为重量级
Kafka概述：
	broker
		Kafka 集群包含一个或多个服务器，服务器节点称为broker。
		broker存储topic的数据，且均衡存储。
		例：
			如果某topic有N个partition，集群有N个broker，那么每个broker存储该topic的一个partition。

			如果某topic有N个partition，集群有(N+M)个broker，那么其中有N个broker存储该topic的一个partition，剩下的M个broker不存储该topic的partition数据。

			如果某topic有N个partition，集群中broker数目少于N个，那么一个broker存储该topic的一个或多个partition。
			在实际生产环境中，尽量避免这种情况的发生，这种情况容易导致Kafka集群数据不均衡。
	Topic
		每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。
		附：
			物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处
		类似于数据库的表名
	Partition？
		topic中的数据分割为一个或多个partition。每个topic至少有一个partition。
		每个partition中的数据使用多个segment文件存储。partition中的数据是有序的，不同partition间的数据丢失了数据的顺序。如果topic有多个partition，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将partition数目设为1。
	Producer
		生产者即数据的发布者，该角色将消息发布到Kafka的topic中。
		broker接收到生产者发送的消息后，broker将该消息追加到当前用于追加数据的segment文件中。生产者发送的消息，存储到一个partition中，生产者也可以指定数据存储的partition。？
	Consumer
		消费者可以从broker中读取数据。消费者可以消费多个topic中的数据。
	Consumer Group？
		每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。
	Leader
		每个partition有多个副本，其中有且仅有一个作为Leader，Leader是当前负责数据的读写的partition。
	Follower
		所有写请求都通过Leader路由，数据变更会广播给所有Follower，Follower与Leader保持数据同步。
		如果Leader失效，则从Follower中选举出一个新的Leader。
		当Follower挂掉、卡住或者同步太慢，leader会把这个follower从“in sync replicas”（ISR）列表中删除，重新创建一个Follower。！