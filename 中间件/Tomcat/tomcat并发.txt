https://blog.csdn.net/lililidahaoren/article/details/121696324

Tomcat能支持的并发：
	介绍：
		对 默认通信方式的tomcat 来说，每一个进来的请求都需要一个线程，直到该请求结束。
		如果同时进来的请求多于当前可用的请求处理线程数，额外的线程就会被创建，直到到达配置的最大线程数(maxThreads属性值)。
		如果仍就同时接收到更多请求，这些来不及处理的请求就会在Connector创建的ServerSocket中堆积起来，
			附：
				直到到达最大的配置值(acceptCount属性值)。至此，任何再来的请求将会收到connection refused错误，直到有可用的资源来处理它们。

	Spring Boot 内嵌的Tomcat配置详解:	
		https://www.cnblogs.com/javastack/p/9153952.html
		https://blog.csdn.net/lililidahaoren/article/details/121696324

		介绍：
            所有参数绑定配置类：org.springframework.boot.autoconfigure.web.ServerProperties
            server.xx开头的是所有servlet容器通用的配置，server.tomcat.xx开头的是tomcat特有的参数，其它类似。


        常用配置介绍：
            server.tomcat.max-connections=2
                # Maximum number of connections that the server will accept and process at any given time.
                #最大能接收的连接数
                    #这个参数是指在同一时间，tomcat能够接受的最大连接数。
                    #maxConnections和accept-count的关系为：当连接数达到最大值maxConnections后，系统会继续接收连接，但不会超过acceptCount的值。
                    #对于Java的阻塞式BIO，默认值是maxthreads的值；如果在BIO模式使用定制的Executor执行器，默认值将是执行器中maxthreads的值。对于Java 新的NIO模式，maxConnections 默认值是10000。对于windows上APR/native IO模式，maxConnections默认值为8192，这是出于性能原因，如果配置的值不是1024的倍数，maxConnections 的实际值将减少到1024的最大倍数。
                    #如果设置为-1，则禁用maxconnections功能，表示不限制tomcat容器的连接数。
            server.tomcat.accept-count=1
                # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
                #请求队列最大能接受的请求数量
                    #官方文档的说明为：当所有的请求处理线程都在使用时，请求的队列能接收的请求数量。当队列已满时，任何的连接请求都将被tomcat拒绝。（connection refused）
                    #accept-count的默认值为100。
                ？为啥不能为0
                ？
                    1. 请求等待：？
                        tomcat请求等待队列中请求，不会在线程有空出来后就立马得到执行，为何?
                        测试时 只有1个等待请求 其要过一段比较长时间(30s以上)才能得到执行，为啥？
                        测试时 有2个等待请求 其要过一段比较长时间(30s以上)才能得到执行，2个都执行了？

            server.tomcat.max-threads=1
                # Maximum amount of worker threads.
                #最大线程数
                    #maxThreads默认200，建议增加。但是，增加线程是有成本的，1. 更多的线程，不仅仅会带来更多的线程上下文切换成本，2. 而且意味着带来更多的内存消耗。JVM中默认情况下在创建新线程时会分配大小为1M的线程栈，所以，更多的线程异味着需要更多的内存。
                    #线程数的经验值为：1核2g内存为200，线程数经验值200；4核8g内存，线程数经验值800。
                    #bio下，每一次HTTP请求到达Web服务，tomcat都会创建一个线程来处理该请求，那么最大线程数决定了Web服务容器可以同时处理多少个请求。
                    #nio下，就是指线程数，与请求数量无关。
            server.tomcat.min-spare-threads=1
                # Minimum amount of worker threads.
                #最小工作空闲线程数
            ？
                线程是tomcat仅用来接收请求的吗。发起请求之类了，也会用到tomcat线程吗



            server.connection-timeout=
                # Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.
                #连接超时。
                    (指到tomcat连接的时间吗？)
            ?
                http请求建立后，服务端正在执行逻辑代码(例sleep)，那么客户端此时断开连接 并不是说服务端代码就停止(而且这个请求在tomcat看来还在，why？它还占用着 max-connections之类的)


	tomcat容器优化：
		https://blog.csdn.net/yangshengwei230612/article/details/109153664
		1、线程数 2、超时时间 3、JVM优化

		1. 线程数
			注：线程数在不同的机器、操作系统组合的情况下可能会不同，最好的方式是多设置几次并且进行测试，观察响应时间和cpu、内存使用情况。

			初始线程数：
				介绍：保障启动的时候，如果有大量用户访问，能够很稳定的接受请求。
				例：
					#最小备用线程数，tomcat启动时的初始化的线程数。
					min-spare-threads：()
			最大线程数：
				介绍：用来保证系统的稳定性。
				#Tomcat可创建的最大的线程数。tomcat默认每一个线程处理一个请求，超过这个请求数后，客户端请求只能排队，等有线程释放才能处理。
				max-threads：默认是200（建议这个配置数可以在服务器CUP核心数的200~250倍之间）
				附：
				允许的最大连接数还受制于操作系统的内核参数设置，通常：
					Windows 每个进程中的线程数不允许超过 2000
					Linux 每个进程中的线程数不允许超过 1000
					另外，在 Java 中每开启一个线程需要耗用 1MB 的 JVM 内存空间用于作为线程栈之用。
			附：
				最大等待队列数：
					#最大等待队列长度，允许HTTP请求缓存到请求队列的最大个数
					#当调用Web服务的HTTP请求数达到tomcat的最大线程数时，还有新的HTTP请求到来，这时tomcat会将该请求放在等待队列中，这个acceptCount就是指能够接受的最大等待数 如果等待队列也被放满了，这个时候再来新的请求就会被tomcat拒绝
					accept-count：默认不限制？（）。
				最大连接数：
					#这个参数是指在同一时间，tomcat能够接受的最大连接数。
					max-connections：默认不设置，默认是10000(一般这个值要大于(max-threads)+(accept-count))
		
		2. 超时时间
			介绍：用来保障连接数不容易被压垮。如果大批量的请求过来，延迟比较高，很容易把线程数用光。
			这时就需要提高超时时间？。
			这种情况在生产中是比较常见的 ，一旦网络不稳定，宁愿丢包也不能把服务器压垮。
			例：
				#最长等待时间，如果没有数据进来，等待一段时间后断开连接，释放线程。
				#设置0，表示永不超时 但这样是有隐患的。
				connection-timeout：默认？(单位ms，通常设置30000。)

		3. JVM优化
			最大内存、初始内存：
				通过调整启动命令参数来调整内存大小。
				-Xms :设置Java堆栈的初始化大小
				-Xmx :设置最大的java堆大小
				例：
					nohup java -Xmx512m -Xms256m -jar -Dspring.profiles.active=dev -Dfile.encoding=UTF-8 test.jar  >> nohup.log 2>&1 &
				附：
					springboot内嵌了tomcat， 所以调整springboot应用进程的内存就是调整tomcat的进程。

			...
	
	附：
	Tomcat 通信方式：
		https://blog.csdn.net/dxyzhbb/article/details/101444786?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ELandingCtr%7ERate-2.queryctrv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ELandingCtr%7ERate-2.queryctrv4&utm_relevant_index=5
		Tomcat支持三种接收请求的处理方式：BIO、NIO、APR 。 
		BIO：
			Tomcat 默认的 HTTP 实现是采用阻塞式的 Socket 通信，每个请求都需要创建一个线程处理。
			这种模式下的并发量受到线程数的限制。
		NIO ：
			Tomcat 还可以配置 NIO 方式的 Socket 通信，在性能上高于阻塞式的，每个请求也不需要创建一个线程进行处理，并发能力比前者高。
			？但没有阻塞式的成熟。
			应用：
				...
			附：nio 是同时处理请求吗
			    nio是可以用一个线程处理多个请求，但并不是说一个线程可以同时处理请求。实测中只创建一个线程 发现当线程休眠 其他请求就无法得到处理了。
			附：
			    深度解读 Tomcat 中的 NIO 模型 https://www.sohu.com/a/203838233_827544

		APR：
			简单理解，就是从操作系统级别解决异步IO问题，大幅度的提高服务器的处理和响应性能， 也是Tomcat运行高并发应用的首选模式。
			启用这种模式稍微麻烦一些，需要安装一些依赖库。
			应用：
				...
	链接：
		https://www.cnblogs.com/zhaosq/p/10870762.html

tomcat原理：
	核心思路：
		Tomcat服务器接受客户请求并做出响应的过程如下：
			1）客户端（通常都是浏览器）访问Web服务器，发送HTTP请求。 
			2）Web服务器接收到请求后，传递给Servlet容器。 
				这里是因为Servlet容器通过指定方式监听linux服务器指定端口，linux才会把请求转给Servlet容器吧。
			？
				Servlet容器是怎么接收请求的了
			3）Servlet容器调用某个Servlet实例，向其传递表示请求和响应的对象
				注：
					Servlet容器加载完Servlet后，会产生Servlet实例。 
			4）Servlet实例使用请求对象得到客户端的请求信息，然后进行相应的处理。 
			5）Servlet实例将处理结果通过响应对象发送回客户端，容器负责确保响应正确送出，同时将控制返回给Web服务器。
		附：

			Servlet实例：
				一个类实现了Servlet接口，然后Web容器启用后加载Servlet并将其实例化，其就叫Servlet实例。
			Servlet是如何处理浏览器请求的：
				https://blog.csdn.net/weixin_33369252/article/details/113317227
				浏览器发起请求到服务器，会遵循HTTP协议将请求数据发送给服务器。
				那么服务器(servlet容器)每接受一个请求后，
				就创建一个对象专门的存储此次请求的请求数据(request),
				同时也创建一个专门对象(response)存储此次请求的响应数据。
				最后调用servlet的方法，并把这两个参数传递过去。

					Request 对象
						服务器接收到浏览器的请求后，会创建一个 Request 对象，对象中存储了此次请求相关的请求数据。
						服务器在调用 Servlet 时会将创建的Request 对象作为实参传递给 Servlet 的方法。

					Response 对象：
						问题：
							在使用 Request 对象获取了请求数据并进行处理后，处理的结果如何显示到浏览器中呢？
						解释：
							服务器在调用指定的 Servlet 进行请求处理的时候，会给 Servlet 的方法传递两个实参 request 和 response。
							其中 request 中封存了请求相关的请求数据，而 response 则是用来进行响应的一个对象。
			Servlet如何处理多个请求访问：(Servlet容器如何处理多个请求访问)
				https://blog.csdn.net/superviser3000/article/details/88024516
				Servlet容器默认是采用单实例多线程的方式处理多个请求的。
				其过程如下：
				　　1.当web服务器启动的时候（或客户端发送请求到服务器时），Servlet就被加载并实例化(只存在一个Servlet实例)；
					　　附：
							容器初始化Servlet主要就是读取配置文件。
							例如tomcat,可以通过servlet.xml的<Connector>设置线程池中线程数目，初始化线程池通过web.xml,初始化每个参数值等等。
				　　3.当请求到达时，Servlet容器通过调度线程(Dispatchaer Thread) 调度它管理下线程池中等待执行的线程（Worker Thread）分给请求者；
				　　4.线程执行Servlet的service方法；
					？？？
						线程与servlet怎么结合的了，没看懂?
						servlet全程只有一个？
				　　5.请求结束，放回线程池，等待被调用；
				注：
					因此要避免使用实例变量（成员变量），因为如果存在成员变量，可能发生多线程同时访问该资源时，都来操作它，照成数据的不一致，因此产生线程安全问题。	
			Tomcat就是一个Servlet容器。
				附：Tomcat是如何处理jsp的
					/JavaEE\servlet\
	源码：
附：
    查询tomcat当前并发连接数
        netstat -na | grep ESTAB | grep 端口号 | wc -l
？服务优化
    http://www.yaotu.net/biancheng/182575.html
    https://blog.csdn.net/weixin_26712065/article/details/112362597
