1.编写接口：
	MyBatis 使用 Java 的动态代理可以直接通过接口来调用相应的方法，不需要提供接口的实现类等。
	
	注：
		注解必须在接口中使用。
		当有多个参数的时候，通过参数注解＠Param 设置参数的名字。省去了手动构造 Map 参数的过程。
2.编写xml：
	xml：
		xml中写sql语句
		注：
			namespace 值要配置成接口的全限定名称，MyBatis内部就是通过这个值将接口和XML 关联起来的。
		附：
			MyBatis注解方式:
				MyBatis注解方式是将SQL直接注解写在接口上，不用再写sql。
				例：
					https://www.cnblogs.com/qlqwjy/p/8540443.html
					https://blog.csdn.net/aa1215018028/article/details/80769277
				SQL 语句构建器：
					https://mybatis.org/mybatis-3/zh/statement-builders.html
					https://blog.csdn.net/only_musm/article/details/78804773
3.注册接口：
	改步骤的最终作用是为了让mybaits能为这些接口生成代理。
	（推荐）方式1.spring中使用@MapperScan 注解或@Mapper 注解：
		https://www.xttblog.com/?p=4102
		@Mapper：
			Mybatis 会有一个拦截器，会自动的把 @Mapper 注解的接口生成动态代理类。
			这点可以在 MapperRegistry 类中的源代码中查看。
		@MapperScan：
			在@MapperScan 配置一个或多个包路径，Mybatis自动的扫描这些包路径下的类，并为它们生成代理类。
		附录：
			xml文件要在resource下：
				https://baijiahao.baidu.com/s?id=1626496550792151955&wfr=spider&for=pc
			    xml文件要在resource下，且xml所在的包名（路径名）要和mapper类的包名一样。
			@MapperScan与@Mapper的区别：
			    @MapperScan类似于@Mapper的整合版，
			    用了@MapperScan(包名)就可以不用@Mapper了。
			    同时有的话，有先@MapperScan。
			    当然也可以只用@Mapper，不用@MapperScan。
	附：
		方式2.mybatis-config.xml mappers元素中配置所有的mapper
		方式3.spring XML配置文件添加一下配置
			<mappers>
				<package name= ” 包名” />
			</mappers>
			解析：
			这种配置方式会先查找 tk.mybatis.simple mapper 包下所有的接口，循环对接口进行如下操作：
				1. 判断接口对应的命名间是否己经存在，如果存在就抛出异常，不存在就继续进行接下来的操作。
				2. 将接口全限定名转换为路径,尝试加载接口对应的xml映射文件。
				例如将接口转换为 tk/mybatis/simple/mapper/UserMapper.xml,搜索 XML 资源，如果找到就解析。
				注：
					resource文件夹下 java文件夹下 都行吧。
					如果接口和 XML 符合第二点，通过该配置就能自动扫描包下 的接口和 XML 映射文件，省去了很多麻烦。
				3. 处理接口中的注解方法。

	附：
		mapper.java和mapper.xml是如何映射起来的：
			https://blog.csdn.net/ldb987/article/details/88872311