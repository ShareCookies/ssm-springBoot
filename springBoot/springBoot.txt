介绍:
	Spring通过依赖注入和面向切面编程，用简单的Java对象（Plain Old Java Object，POJO）实现了EJB(Enterprise JavaBean)的功能。
	虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。
	Spring Boot 是Spring社区一个较新的项目，旨在帮助开发者更容易创建基于 Spring 的应用程序和服务。

	Spring Boot核心：
		Spring Boot提供了四个主要的特性，这些特性能够简化Spring应用的开发。
		Spring Boot Starter：
			它将常用的依赖分组进行了整合，将其合并到一个依赖中，这样就可以一次性添加到项目的Maven或Gradle构建中；
		自动配置：
			Spring Boot的自动配置特性利用了Spring 4对条件化配置的支持，合理地推测应用所需的bean并自动化配置它们；
		命令行接口（Command-line interface，CLI）：
			Spring Boot的CLI发挥了Groovy编程语言的优势，并结合自动配置进一步简化Spring应用的开发；
		Actuator：
			它为Spring Boot应用添加了一定的管理特性。

	hcg：
		使用Spring boot+Mybatis，比Spring+SpringMVC+Mybatis简单许多。
		Spring Boot就是简化了基于 Spring 的应用程序的配置和搭建。
		注：
			1.其实只用Spring boot也可以进行web开发，
			但是对于多表多条件分页查询，Spring boot就有点力不从心了，所以整合了Mybatis。
			2.Spring boot内置了类似tomcat这样的中间件，所以，只要运行DemoApplication中的main方法就可以启动项目了。
		依赖：
		    <!-- springBoot项目需要的依赖 ,解决了Spring，springBoot。-->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter</artifactId>
			</dependency>
			<!-- springBoot项目需要的依赖 ,解决了SpringMVC。？-->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
Spring Boot四个核心:
	Starter依赖：p640
		Spring Boot Starter将springWeb应用所需的各种依赖聚合成一项依赖。
		解析：
			起步依赖就是利用Maven和Gradle的传递依赖解析，把常用库聚合在一起，组成了几个为特定功能而定制的依赖。
		例：
			org.springframework.boot:spring-boot-starter-web
			org.springframework.boot:spring-boot-starter-jdbc
			它会根据依赖传递把其他所需依赖引入项目里，你都不用考虑它们。
			1.比起减少依赖数量，起步依赖还引入了一些微妙的变化。
			向项目中添加了Web起步依赖，实际上指定了应用程序所需的一类功能。
			如果需要安全功能，那就加入security起步依赖。
			简而言之，你不再需要考虑支持某种功能要用什么库了，引入相关起步依赖就行。
			2.此外，Spring Boot的起步依赖还把你从“需要这些库的哪些版本”这个问题里解放了出来。
			起步依赖引入的库的版本都是经过测试的，因此你可以完全放心，它们之间不会出现不兼容的情况。
	自动配置：p643
		Spring Boot的自动配置功能削减了Spring配置的数量。
		它在实现时，会考虑应用中的其他因素并推断你所需要的Spring配置，然后帮你自动配置。
		针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置。
		自动配置消除了传统Spring应用程序里的很多样板配置(就是Java或XML等配置)；
		例：
			如果在Classpath(项目的类路径中)里发现JdbcTemplate，那么它会为你自动配置JdbcTemplate的Bean。
			你无需操心那些Bean的配置，Spring Boot会做好准备，随时都能将其注入到你的Bean里。
	Actuator：p665
		让你能够深入运行中的Spring Boot应用程序，一探究竟。
		只需将Actuator Starter依赖添加到项目中，即可启用Actuator。
		例：
			启用Actuator后，如果想查看Spring应用上下文中所有的bean，那么可以访问http://localhost:8080/beans。
	命令行界面：
		Spring Boot CLI（command-line interface，命令行界面）是Spring Boot的非必要组成部分。
		虽然它为Spring带来了惊人的力量，大大简化了开发，但也引入了一套不太常规的开发模型。
	总结：
		从本质上来说，Spring Boot就是做了spring的样板配置，常说的Spring Boot项目就用到了起步依赖和自动配置而已。
*使用SpringBoot构建应用：p647
	
	使用 Maven 搭建一个Spring Boot 项目:
		1.建一个空的 Maven 项目，然后编辑 pom.xml。如Maven_SpringBoot_pom.xml
		2.包中创建一个springBoot启动类
		到这里SpringBoot 已经搭建完成，但是直接访问就会提示请求出错。
		注：
			以上步骤可用Spring Initializr来完成。
		3.controller 包创建一个基本的springMVC控制器类，
		以 Java 应用的方式启动 Application。
		到这里web网站已建好
		注：
			默认情况下tomcat的端口为 8080 ，以http: //localhost:8080访问
		4.集成mybaits：
		5.构建项目：
			命令行$mvn package
			运行Maven构建后，你会在target文件夹下找到构建形成的结果。
			构建war包：
				p658
		6.运行项目：
			按照传统的方式，这意味着要将应用的WAR文件部署到Servlet容器中，如Tomcat或WebSphere。
			但是在这里，我们甚至没有WAR文件，只有构建形成的是一个JAR文件。
			我们可以按照如下的方式从命令行运行它：
				java -jar ...jar
			应用已经启动完成。
	总结：
		Spring Boot应用无需任何配置，但需要个特殊的类来启动Spring Boot应用。
	 

Spring Initializr：
	Spring Initializr从本质上来说就是一个Web应用程序，它能为你生成Spring Boot项目结构。
	虽然不能生成应用程序代码，但它能为你提供一个基本的项目结构，
	以及一个用于构建代码的Maven或Gradle构建说明文件。你只需要写应用程序的代码就好了。
	Spring Initializr有几种用法。
		通过Web界面使用。
			https://start.spring.io/
  		通过Spring Tool Suite使用。
  		通过IntelliJ IDEA使用。
			https://blog.csdn.net/wya1993/article/details/79578677
  		使用Spring Boot CLI使用。


